/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/streams/logs/tail": {
    /** Tails logs */
    get: operations["TailLogs"];
  };
  "/v1/streams/metrics": {
    get: operations["GetMetrics"];
  };
  "/v1/streams/instances/exec": {
    /**
     * Exec Command
     * @description This endpoint opens a websocket. Once open, all frames going through the websocket should be formatted in JSON. Input frames should match the format specified below. Output frames will match the response schema.
     */
    get: operations["ExecCommand"];
  };
  "/v1/activities": {
    get: operations["ListActivities"];
  };
  "/v1/notifications": {
    get: operations["ListNotifications"];
  };
  "/v1/usages": {
    /** Get organization usage */
    get: operations["GetOrganizationUsage"];
  };
  "/v1/usages/details": {
    /** Get organization usage details */
    get: operations["GetOrganizationUsageDetails"];
  };
  "/v1/volumes": {
    /** List all PersistentVolumes */
    get: operations["ListPersistentVolumes"];
    /** Create a PersistentVolume */
    post: operations["CreatePersistentVolume"];
  };
  "/v1/volumes/{id}": {
    /** Get a PersistentVolume */
    get: operations["GetPersistentVolume"];
    /** Update a PersistentVolume */
    post: operations["UpdatePersistentVolume"];
    /** Delete a PersistentVolume */
    delete: operations["DeletePersistentVolume"];
  };
  "/v1/app_events": {
    /** List App events */
    get: operations["ListAppEvents"];
  };
  "/v1/apps": {
    /** List App */
    get: operations["ListApps"];
    /** Create App */
    post: operations["CreateApp"];
  };
  "/v1/apps/{id}": {
    /** Get App */
    get: operations["GetApp"];
    /** Update App */
    put: operations["UpdateApp"];
    /**
     * Delete App
     * @description App deletion is allowed for all status.
     */
    delete: operations["DeleteApp"];
    /** Update App */
    patch: operations["UpdateApp2"];
  };
  "/v1/apps/{id}/pause": {
    /**
     * Pause App
     * @description App pause action is allowed for the following status:
     *  - starting
     *  - healthy
     *  - degraded
     *  - unhealthy
     *  - resuming
     */
    post: operations["PauseApp"];
  };
  "/v1/apps/{id}/resume": {
    /**
     * Resume App
     * @description App resume action is allowed for the following status:
     *  - paused
     */
    post: operations["ResumeApp"];
  };
  "/v1/secrets": {
    get: operations["ListSecrets"];
    post: operations["CreateSecret"];
  };
  "/v1/secrets/{id}": {
    get: operations["GetSecret"];
    put: operations["UpdateSecret"];
    delete: operations["DeleteSecret"];
    patch: operations["UpdateSecret2"];
  };
  "/v1/secrets/{id}/reveal": {
    post: operations["RevealSecret"];
  };
  "/v1/archives": {
    /** Create a signed URL to upload an archive. */
    post: operations["CreateArchive"];
  };
  "/v1/quotas/capacity": {
    /** Review Organization Capacity */
    post: operations["ReviewOrganizationCapacity"];
  };
  "/v1/docker-helper/verify": {
    /** Verify if a docker image is reachable */
    get: operations["VerifyDockerImage"];
  };
  "/v1/deployment_events": {
    /** List Deployment events */
    get: operations["ListDeploymentEvents"];
  };
  "/v1/deployments": {
    /** List Deployments */
    get: operations["ListDeployments"];
  };
  "/v1/deployments/{id}": {
    /** Get Deployment */
    get: operations["GetDeployment"];
  };
  "/v1/deployments/{id}/cancel": {
    /**
     * Cancel Deployment
     * @description Deployment cancellation is allowed for the following status:
     *  - pending
     *  - provisioning
     *  - scheduled
     */
    post: operations["CancelDeployment"];
  };
  "/v1/regional_deployment_events": {
    /** List Regional Deployment events */
    get: operations["ListRegionalDeploymentEvents"];
  };
  "/v1/regional_deployments": {
    /**
     * Experimental: List regional deployments
     * Use at your own risk
     */
    get: operations["ListRegionalDeployments"];
  };
  "/v1/regional_deployments/{id}": {
    /**
     * Experimental: Get regional deployment
     * Use at your own risk
     */
    get: operations["GetRegionalDeployment"];
  };
  "/v1/service_events": {
    /** List Service events */
    get: operations["ListServiceEvents"];
  };
  "/v1/services": {
    /** List Services */
    get: operations["ListServices"];
    /** Create Service */
    post: operations["CreateService"];
  };
  "/v1/services-autocomplete": {
    /** Generate autocomplete definition for a service */
    post: operations["Autocomplete"];
  };
  "/v1/services/{id}": {
    /** Get Service */
    get: operations["GetService"];
    /** Update Service */
    put: operations["UpdateService"];
    /**
     * Delete Service
     * @description Service deletion is allowed for all status.
     */
    delete: operations["DeleteService"];
    /** Update Service */
    patch: operations["UpdateService2"];
  };
  "/v1/services/{id}/pause": {
    /**
     * Pause Service
     * @description Service pause action is allowed for the following status:
     *  - starting
     *  - healthy
     *  - degraded
     *  - unhealthy
     *  - resuming
     */
    post: operations["PauseService"];
  };
  "/v1/services/{id}/redeploy": {
    /** ReDeploy Service */
    post: operations["ReDeploy"];
  };
  "/v1/services/{id}/resume": {
    /**
     * Resume Service
     * @description Service resume action is allowed for the following status:
     *  - paused
     */
    post: operations["ResumeService"];
  };
  "/v1/domains": {
    get: operations["ListDomains"];
    post: operations["CreateDomain"];
  };
  "/v1/domains/{id}": {
    get: operations["GetDomain"];
    delete: operations["DeleteDomain"];
    patch: operations["UpdateDomain"];
  };
  "/v1/domains/{id}/refresh": {
    post: operations["RefreshDomainStatus"];
  };
  "/v1/instance_events": {
    /** List Instance events */
    get: operations["ListInstanceEvents"];
  };
  "/v1/instances": {
    /** List Instances */
    get: operations["ListInstances"];
  };
  "/v1/instances/{id}": {
    /** Get Instance */
    get: operations["GetInstance"];
  };
  "/v1/git/branches": {
    get: operations["ListBranches"];
  };
  "/v1/git/repositories": {
    get: operations["ListRepositories"];
  };
  "/v1/git/sync/organization/{organization_id}": {
    post: operations["ResyncOrganization"];
  };
  "/v1/search": {
    /** Search */
    get: operations["Search"];
  };
  "/v1/catalog/regions": {
    /** List Region */
    get: operations["ListRegions"];
  };
  "/v1/catalog/regions/{id}": {
    /** Get Region */
    get: operations["GetRegion"];
  };
  "/v1/catalog/datacenters": {
    /** List datacenters */
    get: operations["ListDatacenters"];
  };
  "/v1/catalog/instances": {
    /** List Instance */
    get: operations["ListCatalogInstances"];
  };
  "/v1/catalog/instances/{id}": {
    /** Get Instance */
    get: operations["GetCatalogInstance"];
  };
  "/v1/credentials": {
    /** List credentials */
    get: operations["ListCredentials"];
    /** Create credential */
    post: operations["CreateCredential"];
  };
  "/v1/credentials/{id}": {
    /** Get credential */
    get: operations["GetCredential"];
    /** Update credential */
    put: operations["UpdateCredential"];
    /** Delete credential */
    delete: operations["DeleteCredential"];
    /** Update credential */
    patch: operations["UpdateCredential2"];
  };
  "/v1/intercom/profile": {
    /** Get intercom profile */
    get: operations["GetIntercomProfile"];
  };
  "/v1/organizations/{organization_id}/summary": {
    /** Get organization usage summary */
    get: operations["GetOrganizationSummary"];
  };
  "/v1/subscriptions/{id}": {
    /** Get Subscription */
    get: operations["GetSubscription"];
  };
  "/v1/account/activities": {
    get: operations["GetAccountActivities"];
  };
  "/v1/account/invite": {
    post: operations["CreateInvite"];
  };
  "/v1/account/oauth": {
    /** Get OAuth Providers */
    get: operations["GetOAuthOptions"];
    /** Authenticate using OAuth */
    post: operations["OAuthCallback"];
  };
  "/v1/account/organization": {
    get: operations["GetCurrentOrganization"];
  };
  "/v1/account/organization_invitations": {
    get: operations["ListUserOrganizationInvitations"];
  };
  "/v1/account/organization_invitations/{id}": {
    get: operations["GetUserOrganizationInvitation"];
  };
  "/v1/account/organization_invitations/{id}/accept": {
    post: operations["AcceptOrganizationInvitation"];
  };
  "/v1/account/organization_invitations/{id}/decline": {
    post: operations["DeclineOrganizationInvitation"];
  };
  "/v1/account/profile": {
    get: operations["GetCurrentUser"];
    put: operations["UpdateUser"];
    patch: operations["UpdateUser2"];
  };
  "/v1/account/resend_validation": {
    post: operations["ResendEmailValidation"];
  };
  "/v1/account/reset_password": {
    post: operations["ResetPassword"];
  };
  "/v1/account/signup": {
    post: operations["Signup"];
  };
  "/v1/account/update_password": {
    post: operations["UpdatePassword"];
  };
  "/v1/account/validate/{id}": {
    post: operations["Validate"];
  };
  "/v1/billing/has_unpaid_invoices": {
    /**
     * Experimental: Has unpaid invoices
     * @description WARNING: Please don't use the following method.
     * Koyeb doesn't guarantee backwards compatible breaking change and reserve the right to completely drop it without notice.
     * USE AT YOUR OWN RISK.
     */
    get: operations["HasUnpaidInvoices"];
  };
  "/v1/billing/manage": {
    get: operations["Manage"];
  };
  "/v1/billing/next_invoice": {
    /**
     * Experimental: Fetch next invoice
     * @description WARNING: Please don't use the following method.
     * Koyeb doesn't guarantee backwards compatible breaking change and reserve the right to completely drop it without notice.
     * USE AT YOUR OWN RISK.
     */
    get: operations["NextInvoice"];
  };
  "/v1/github/installation": {
    /** Fetch github installation configuration */
    get: operations["GetGithubInstallation"];
    /** Start github installation */
    post: operations["GithubInstallation"];
  };
  "/v1/github/installation/callback": {
    /** Github callback for app installation */
    post: operations["GithubInstallationCallback"];
  };
  "/v1/organizations": {
    /** Create organization */
    post: operations["CreateOrganization"];
  };
  "/v1/organizations/{id}": {
    /** Get organization */
    get: operations["GetOrganization"];
    /** Update organization */
    put: operations["UpdateOrganization"];
    /** Delete an organization */
    delete: operations["DeleteOrganization"];
    /** Update organization */
    patch: operations["UpdateOrganization2"];
  };
  "/v1/organizations/{id}/deactivate": {
    /** Deactivate an organization */
    post: operations["DeactivateOrganization"];
  };
  "/v1/organizations/{id}/plan": {
    /** Update organization plan */
    post: operations["UpdateOrganizationPlan"];
  };
  "/v1/organizations/{id}/reactivate": {
    /** Reactivate an organization */
    post: operations["ReactivateOrganization"];
  };
  "/v1/organizations/{id}/signup_qualification": {
    /** Upsert organization's signup qualification */
    post: operations["UpsertSignupQualification"];
  };
  "/v1/organizations/{id}/switch": {
    /** Switch organization context */
    post: operations["SwitchOrganization"];
  };
  "/v1/sso/canny": {
    post: operations["CannyAuth"];
  };
  "/v1/sso/discourse": {
    post: operations["DiscourseAuth"];
  };
  "/v1/payment_methods": {
    /** List payment methods */
    get: operations["ListPaymentMethods"];
    /** Create payment authorization */
    post: operations["CreatePaymentAuthorization"];
  };
  "/v1/payment_methods/{id}": {
    /** Get payment method */
    get: operations["GetPaymentMethod"];
    /** Delete payment method */
    delete: operations["DeletePaymentMethod"];
  };
  "/v1/payment_methods/{id}/confirm": {
    /** Confirm payment authorization */
    post: operations["ConfirmPaymentAuthorization"];
  };
  "/v1/users/{id}": {
    /** Delete user */
    delete: operations["DeleteUser"];
  };
  "/v1/organizations/{organization_id}/quotas": {
    get: operations["GetQuotas"];
  };
  "/v1/organization_members": {
    /** List organization members */
    get: operations["ListOrganizationMembers"];
  };
  "/v1/organization_members/{id}": {
    /** Remove an organization member */
    delete: operations["RemoveOrganizationMember"];
  };
  "/v1/account/login": {
    /** Login user */
    post: operations["Login"];
  };
  "/v1/account/logout": {
    /** Logout user */
    delete: operations["Logout"];
  };
  "/v1/account/refresh": {
    /** Refresh token */
    put: operations["RefreshToken"];
  };
  "/v1/account/session": {
    /**
     * New session
     * @description Creates a new session without an organization for current user.
     * NOTE: If you want a session linked to another organization, please use "Switch organization".
     */
    post: operations["NewSession"];
  };
  "/v1/organization_confirmations/{id}": {
    /** Confirm organization action */
    post: operations["ConfirmOrganizationAction"];
  };
  "/v1/organization_invitations": {
    get: operations["ListOrganizationInvitations"];
    post: operations["CreateOrganizationInvitation"];
  };
  "/v1/organization_invitations/{id}": {
    get: operations["GetOrganizationInvitation"];
    delete: operations["DeleteOrganizationInvitation"];
  };
  "/v1/organization_invitations/{id}/resend": {
    post: operations["ResendOrganizationInvitation"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    "google.protobuf.Any": {
      "@type"?: string;
      [key: string]: Record<string, never> | undefined;
    };
    /**
     * @description `NullValue` is a singleton enumeration to represent the null value for the
     * `Value` type union.
     *
     *  The JSON representation for `NullValue` is JSON `null`.
     *
     *  - NULL_VALUE: Null value.
     * @default NULL_VALUE
     * @enum {string}
     */
    "google.protobuf.NullValue": "NULL_VALUE";
    "google.rpc.Status": {
      /** Format: int32 */
      code?: number;
      message?: string;
      details?: components["schemas"]["google.protobuf.Any"][];
    };
    Error: {
      /** Format: int32 */
      status?: number;
      code?: string;
      message?: string;
    };
    ErrorField: {
      field?: string;
      description?: string;
    };
    ErrorWithFields: {
      /** Format: int32 */
      status?: number;
      code?: string;
      message?: string;
      fields?: components["schemas"]["ErrorField"][];
    };
    LogEntry: {
      msg?: string;
      /** Format: date-time */
      created_at?: string;
      labels?: Record<string, never>;
    };
    GetMetricsReply: {
      metrics?: components["schemas"]["GetMetricsReply.Metric"][];
    };
    "GetMetricsReply.Metric": {
      labels?: {
        [key: string]: string;
      };
      samples?: components["schemas"]["Sample"][];
    };
    /**
     * @default UNKNOWN
     * @enum {string}
     */
    MetricName: "UNKNOWN" | "CPU_TOTAL_PERCENT" | "MEM_RSS" | "HTTP_THROUGHPUT" | "HTTP_RESPONSE_TIME_50P" | "HTTP_RESPONSE_TIME_90P" | "HTTP_RESPONSE_TIME_99P" | "HTTP_RESPONSE_TIME_MAX" | "PUBLIC_DATA_TRANSFER_IN" | "PUBLIC_DATA_TRANSFER_OUT";
    Sample: {
      timestamp?: string;
      /** Format: double */
      value?: number;
    };
    ExecCommandIO: {
      /**
       * Format: byte
       * @description Data is base64 encoded
       */
      data?: string;
      /** @description Indicate last data frame */
      close?: boolean;
    };
    ExecCommandReply: {
      stdout?: components["schemas"]["ExecCommandIO"];
      stderr?: components["schemas"]["ExecCommandIO"];
      exited?: boolean;
      /** Format: int32 */
      exit_code?: number;
    };
    "ExecCommandRequest.Body": {
      /** @description Command to exec. Mandatory in the first frame sent */
      command?: string[];
      tty_size?: components["schemas"]["ExecCommandRequest.TerminalSize"];
      stdin?: components["schemas"]["ExecCommandIO"];
      /** @description Disable TTY. It's enough to specify it in the first frame */
      disableTty?: boolean;
    };
    /**
     * @default INVALID
     * @enum {string}
     */
    "ExecCommandRequest.IdType": "INVALID" | "INSTANCE_ID" | "SERVICE_ID";
    "ExecCommandRequest.TerminalSize": {
      /** Format: int32 */
      height?: number;
      /** Format: int32 */
      width?: number;
    };
    Activity: {
      id?: string;
      actor?: components["schemas"]["Object"];
      object?: components["schemas"]["Object"];
      verb?: string;
      metadata?: Record<string, never>;
      /** Format: date-time */
      created_at?: string;
    };
    ActivityList: {
      activities?: components["schemas"]["Activity"][];
      /** Format: int64 */
      limit?: number;
      /** Format: int64 */
      offset?: number;
    };
    Notification: {
      id?: string;
      activity?: components["schemas"]["Activity"];
      is_read?: boolean;
      is_seen?: boolean;
      /** Format: date-time */
      created_at?: string;
    };
    NotificationList: {
      notifications?: components["schemas"]["Notification"][];
      /** Format: int64 */
      limit?: number;
      /** Format: int64 */
      offset?: number;
      /** Format: int64 */
      count?: number;
      is_read?: boolean;
      is_seen?: boolean;
      /** Format: int64 */
      unread?: number;
      /** Format: int64 */
      unseen?: number;
    };
    Object: {
      id?: string;
      name?: string;
      type?: string;
      metadata?: Record<string, never>;
      deleted?: boolean;
    };
    AppUsage: {
      app_id?: string;
      app_name?: string;
      services?: components["schemas"]["ServiceUsage"][];
    };
    GetOrganizationUsageDetailsReply: {
      /** The collection of usage instances */
      usage_details?: components["schemas"]["UsageDetails"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /**
       * The total number of items
       * Format: int64
       */
      count?: number;
      /** The order in the request */
      order?: string;
    };
    GetOrganizationUsageReply: {
      usage?: components["schemas"]["Usage"];
    };
    InstanceUsage: {
      /** Format: int64 */
      duration_seconds?: number;
    };
    PeriodUsage: {
      /** Format: date-time */
      starting_time?: string;
      /** Format: date-time */
      ending_time?: string;
      apps?: components["schemas"]["AppUsage"][];
    };
    RegionUsage: {
      instances?: {
        [key: string]: components["schemas"]["InstanceUsage"];
      };
    };
    ServiceUsage: {
      service_id?: string;
      service_name?: string;
      regions?: {
        [key: string]: components["schemas"]["RegionUsage"];
      };
    };
    Usage: {
      organization_id?: string;
      periods?: {
        [key: string]: components["schemas"]["PeriodUsage"];
      };
    };
    UsageDetails: {
      organization_id?: string;
      instance_id?: string;
      app_id?: string;
      app_name?: string;
      service_id?: string;
      service_name?: string;
      regional_deployment_id?: string;
      region?: string;
      deployment_id?: string;
      instance_type?: string;
      /** Format: int64 */
      duration_seconds?: number;
      /** Format: date-time */
      started_at?: string;
      /** Format: date-time */
      terminated_at?: string;
    };
    CreatePersistentVolumeReply: {
      volume?: components["schemas"]["PersistentVolume"];
    };
    CreatePersistentVolumeRequest: {
      volume_type?: components["schemas"]["PersistentVolumeBackingStore"];
      /** the volume name */
      name?: string;
      /** the volume region */
      region?: string;
      /** whether the volume must be set as read only */
      read_only?: boolean;
      /**
       * the size of the volume (in Gigabyte / GB)
       * Format: int64
       */
      max_size?: number;
    };
    DeletePersistentVolumeReply: {
      volume?: components["schemas"]["PersistentVolume"];
    };
    GetPersistentVolumeReply: {
      volume?: components["schemas"]["PersistentVolume"];
    };
    ListPersistentVolumesReply: {
      /** The collection of persistent volumes */
      volumes?: components["schemas"]["PersistentVolume"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
    };
    /** The object that represent a volume to handle persistency for deployments */
    PersistentVolume: {
      /** the identifier for the volume object */
      id?: string;
      /** the volume name */
      name?: string;
      /**
       * creation timestamp
       * Format: date-time
       */
      created_at?: string;
      /**
       * last change timestapm
       * Format: date-time
       */
      updated_at?: string;
      /**
       * deletion timestapm
       * Format: date-time
       */
      deleted_at?: string;
      /** the organization to which the volume belongs to */
      organization_id?: string;
      /** the service_id to which the volume is eventually bound to */
      service_id?: string;
      /** the region where the volume exists */
      region?: string;
      /** whether to mount the volume in read-only mode */
      read_only?: boolean;
      /**
       * the maximum size of the volume (in Gigabyte / GB)
       * Format: int64
       */
      max_size?: number;
      /**
       * the used amount of space as measured the last time (in Gigabyte / GB)
       * Format: int64
       */
      cur_size?: number;
      status?: components["schemas"]["PersistentVolumeStatus"];
      backing_store?: components["schemas"]["PersistentVolumeBackingStore"];
    };
    /**
     * - PERSISTENT_VOLUME_BACKING_STORE_INVALID: zero value, invalid
     *  - PERSISTENT_VOLUME_BACKING_STORE_LOCAL_BLK: the backing store is a locally reachable block device
     * @default PERSISTENT_VOLUME_BACKING_STORE_INVALID
     * @enum {string}
     */
    PersistentVolumeBackingStore: "PERSISTENT_VOLUME_BACKING_STORE_INVALID" | "PERSISTENT_VOLUME_BACKING_STORE_LOCAL_BLK";
    /**
     * - PERSISTENT_VOLUME_STATUS_INVALID: zero value, invalid
     *  - PERSISTENT_VOLUME_STATUS_ATTACHED: the volume is attached to an instance
     *  - PERSISTENT_VOLUME_STATUS_DETACHED: the volume is free to use
     *  - PERSISTENT_VOLUME_STATUS_DELETING: the volume will be deleted
     *  - PERSISTENT_VOLUME_STATUS_DELETED: the volume was deleted
     * @default PERSISTENT_VOLUME_STATUS_INVALID
     * @enum {string}
     */
    PersistentVolumeStatus: "PERSISTENT_VOLUME_STATUS_INVALID" | "PERSISTENT_VOLUME_STATUS_ATTACHED" | "PERSISTENT_VOLUME_STATUS_DETACHED" | "PERSISTENT_VOLUME_STATUS_DELETING" | "PERSISTENT_VOLUME_STATUS_DELETED";
    UpdatePersistentVolumeReply: {
      volume?: components["schemas"]["PersistentVolume"];
    };
    App: {
      id?: string;
      name?: string;
      organization_id?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      started_at?: string;
      /** Format: date-time */
      succeeded_at?: string;
      /** Format: date-time */
      paused_at?: string;
      /** Format: date-time */
      resumed_at?: string;
      /** Format: date-time */
      terminated_at?: string;
      status?: components["schemas"]["App.Status"];
      messages?: string[];
      /** Format: uint64 */
      version?: string;
      domains?: components["schemas"]["Domain"][];
    };
    /**
     * @default STARTING
     * @enum {string}
     */
    "App.Status": "STARTING" | "HEALTHY" | "DEGRADED" | "UNHEALTHY" | "DELETING" | "DELETED" | "PAUSING" | "PAUSED" | "RESUMING";
    AppEvent: {
      id?: string;
      /** Format: date-time */
      when?: string;
      organization_id?: string;
      app_id?: string;
      type?: string;
      message?: string;
      metadata?: Record<string, never>;
    };
    AppListItem: {
      id?: string;
      name?: string;
      organization_id?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      created_at?: string;
      domains?: components["schemas"]["Domain"][];
      status?: components["schemas"]["App.Status"];
      messages?: string[];
    };
    CreateApp: {
      name?: string;
    };
    CreateAppReply: {
      app?: components["schemas"]["App"];
    };
    DeleteAppReply: Record<string, never>;
    Domain: {
      id?: string;
      organization_id?: string;
      name?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      status?: components["schemas"]["Domain.Status"];
      type?: components["schemas"]["Domain.Type"];
      app_id?: string;
      deployment_group?: string;
      /** Format: date-time */
      verified_at?: string;
      intended_cname?: string;
      messages?: string[];
      /** Format: uint64 */
      version?: string;
    };
    /**
     * @default PENDING
     * @enum {string}
     */
    "Domain.Status": "PENDING" | "ACTIVE" | "ERROR" | "DELETING" | "DELETED";
    /**
     * - AUTOASSIGNED: Domain like <appName>-<orgName>.koyeb.app
     * @default AUTOASSIGNED
     * @enum {string}
     */
    "Domain.Type": "AUTOASSIGNED" | "CUSTOM";
    GetAppReply: {
      app?: components["schemas"]["App"];
    };
    ListAppEventsReply: {
      /** The collection of events */
      events?: components["schemas"]["AppEvent"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /** The order in the request */
      order?: string;
    };
    ListAppsReply: {
      apps?: components["schemas"]["AppListItem"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /**
       * The total number of items
       * Format: int64
       */
      count?: number;
    };
    PauseAppReply: Record<string, never>;
    ResumeAppReply: Record<string, never>;
    UpdateApp: {
      name?: string;
    };
    UpdateAppReply: {
      app?: components["schemas"]["App"];
    };
    AzureContainerRegistryConfiguration: {
      registry_name?: string;
      username?: string;
      password?: string;
    };
    CreateSecret: {
      name?: string;
      type?: components["schemas"]["SecretType"];
      value?: string;
      docker_hub_registry?: components["schemas"]["DockerHubRegistryConfiguration"];
      private_registry?: components["schemas"]["PrivateRegistryConfiguration"];
      digital_ocean_registry?: components["schemas"]["DigitalOceanRegistryConfiguration"];
      github_registry?: components["schemas"]["GitHubRegistryConfiguration"];
      gitlab_registry?: components["schemas"]["GitLabRegistryConfiguration"];
      gcp_container_registry?: components["schemas"]["GCPContainerRegistryConfiguration"];
      azure_container_registry?: components["schemas"]["AzureContainerRegistryConfiguration"];
    };
    CreateSecretReply: {
      secret?: components["schemas"]["Secret"];
    };
    DatabaseRolePassword: {
      username?: string;
      password?: string;
    };
    DeleteSecretReply: Record<string, never>;
    DigitalOceanRegistryConfiguration: {
      username?: string;
      password?: string;
    };
    DockerHubRegistryConfiguration: {
      username?: string;
      password?: string;
    };
    GCPContainerRegistryConfiguration: {
      keyfile_content?: string;
      url?: string;
    };
    GetSecretReply: {
      secret?: components["schemas"]["Secret"];
    };
    GitHubRegistryConfiguration: {
      username?: string;
      password?: string;
    };
    GitLabRegistryConfiguration: {
      username?: string;
      password?: string;
    };
    ListSecretsReply: {
      secrets?: components["schemas"]["Secret"][];
      /** Format: int64 */
      limit?: number;
      /** Format: int64 */
      offset?: number;
      /** Format: int64 */
      count?: number;
    };
    PrivateRegistryConfiguration: {
      username?: string;
      password?: string;
      url?: string;
    };
    RevealSecretReply: {
      value?: Record<string, never>;
    };
    Secret: {
      id?: string;
      name?: string;
      organization_id?: string;
      type?: components["schemas"]["SecretType"];
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      created_at?: string;
      value?: string;
      docker_hub_registry?: components["schemas"]["DockerHubRegistryConfiguration"];
      private_registry?: components["schemas"]["PrivateRegistryConfiguration"];
      digital_ocean_registry?: components["schemas"]["DigitalOceanRegistryConfiguration"];
      github_registry?: components["schemas"]["GitHubRegistryConfiguration"];
      gitlab_registry?: components["schemas"]["GitLabRegistryConfiguration"];
      gcp_container_registry?: components["schemas"]["GCPContainerRegistryConfiguration"];
      azure_container_registry?: components["schemas"]["AzureContainerRegistryConfiguration"];
      database_role_password?: components["schemas"]["DatabaseRolePassword"];
    };
    /**
     * @default SIMPLE
     * @enum {string}
     */
    SecretType: "SIMPLE" | "REGISTRY" | "MANAGED";
    UpdateSecretReply: {
      secret?: components["schemas"]["Secret"];
    };
    Archive: {
      /** @description The archive id, that can be referenced when creating or updating a service. */
      id?: string;
      /** @description Organization owning the archive. */
      organization_id?: string;
      /**
       * @description The URL where to upload the archive. This URL is signed and can only be
       * used to upload the archive until `valid_until`.
       */
      upload_url?: string;
      /**
       * Format: uint64
       * @description The provisioned space for the archive.
       */
      size?: string;
      /**
       * Format: date-time
       * @description Date of creation of the archive.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description This field is automatically set by Koyeb when the
       * archive is garbage collected.
       */
      deleted_at?: string;
    };
    CreateArchive: {
      /**
       * Format: uint64
       * @description How much space to provision for the archive, in bytes.
       */
      size?: string;
    };
    CreateArchiveReply: {
      archive?: components["schemas"]["Archive"];
    };
    ReviewOrganizationCapacityReply: {
      has_capacity?: boolean;
    };
    ReviewOrganizationCapacityRequest: {
      plan?: string;
    };
    VerifyDockerImageReply: {
      /** Whether the image is accessible or not */
      success?: boolean;
      /** (Optional) If the image is not accessible, the reason */
      reason?: string;
      code?: components["schemas"]["VerifyDockerImageReply.ErrCode"];
    };
    /**
     * The error code associated to each specific failure mode
     * @description - UNKNOWN: Default value
     *  - AUTH_ACCESS_DENIED: The registry denied access to an authenticated request
     *  - ANON_ACCESS_DENIED: The registry denied access to an anonymous request
     *  - AUTH_NOT_FOUND: The image has not been found after an authenticated request
     *  - ANON_NOT_FOUND: The image has not been found after an anonymous request
     *  - REGISTRY_ERROR: The registry returned an error
     *  - TIMEOUT: The request to the registry timed out
     *  - DNS: There was an error trying to resolve the name of the registry
     *  - MALFORMED: The provided image name is malformed
     *  - INVALID_OS: The operating system is not supported
     *  - INVALID_ARCH: The architecture is not supported
     * @default UNKNOWN
     * @enum {string}
     */
    "VerifyDockerImageReply.ErrCode": "UNKNOWN" | "AUTH_ACCESS_DENIED" | "ANON_ACCESS_DENIED" | "AUTH_NOT_FOUND" | "ANON_NOT_FOUND" | "REGISTRY_ERROR" | "TIMEOUT" | "DNS" | "MALFORMED" | "INVALID_OS" | "INVALID_ARCH";
    ArchiveDeploymentMetadata: {
      last_provisioned_deployment_id?: string;
    };
    ArchiveSource: {
      /** The ID of the archive to deploy */
      id?: string;
      buildpack?: components["schemas"]["BuildpackBuilder"];
      docker?: components["schemas"]["DockerBuilder"];
    };
    BuildpackBuilder: {
      /** A command used to override the build command, run after all build steps */
      build_command?: string;
      /** A command used to override the default run command */
      run_command?: string;
      /** A flag to run the container in privileged mode */
      privileged?: boolean;
    };
    CancelDeploymentReply: Record<string, never>;
    DatabaseDeploymentMetadata: {
      neon_postgres?: components["schemas"]["NeonPostgresDatabaseDeploymentMetadata"];
    };
    DatabaseSource: {
      neon_postgres?: components["schemas"]["NeonPostgresDatabase"];
    };
    Deployment: {
      id?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      allocated_at?: string;
      /** Format: date-time */
      started_at?: string;
      /** Format: date-time */
      succeeded_at?: string;
      /** Format: date-time */
      terminated_at?: string;
      organization_id?: string;
      app_id?: string;
      service_id?: string;
      parent_id?: string;
      child_id?: string;
      status?: components["schemas"]["Deployment.Status"];
      metadata?: components["schemas"]["DeploymentMetadata"];
      definition?: components["schemas"]["DeploymentDefinition"];
      messages?: string[];
      provisioning_info?: components["schemas"]["DeploymentProvisioningInfo"];
      database_info?: components["schemas"]["DeploymentDatabaseInfo"];
      skip_build?: boolean;
      role?: components["schemas"]["Deployment.Role"];
      /** Format: uint64 */
      version?: string;
      deployment_group?: string;
    };
    /**
     * @default INVALID
     * @enum {string}
     */
    "Deployment.Role": "INVALID" | "ACTIVE" | "UPCOMING" | "CURRENT";
    /**
     * @default PENDING
     * @enum {string}
     */
    "Deployment.Status": "PENDING" | "PROVISIONING" | "SCHEDULED" | "CANCELING" | "CANCELED" | "ALLOCATING" | "STARTING" | "HEALTHY" | "DEGRADED" | "UNHEALTHY" | "STOPPING" | "STOPPED" | "ERRORING" | "ERROR" | "STASHED";
    DeploymentDatabaseInfo: {
      neon_postgres?: components["schemas"]["DeploymentNeonPostgresDatabaseInfo"];
    };
    DeploymentDefinition: {
      name?: string;
      type?: components["schemas"]["DeploymentDefinition.Type"];
      routes?: components["schemas"]["DeploymentRoute"][];
      ports?: components["schemas"]["DeploymentPort"][];
      env?: components["schemas"]["DeploymentEnv"][];
      regions?: string[];
      scalings?: components["schemas"]["DeploymentScaling"][];
      instance_types?: components["schemas"]["DeploymentInstanceType"][];
      health_checks?: components["schemas"]["DeploymentHealthCheck"][];
      volumes?: components["schemas"]["DeploymentVolume"][];
      skip_cache?: boolean;
      docker?: components["schemas"]["DockerSource"];
      git?: components["schemas"]["GitSource"];
      database?: components["schemas"]["DatabaseSource"];
      archive?: components["schemas"]["ArchiveSource"];
    };
    /**
     * @default INVALID
     * @enum {string}
     */
    "DeploymentDefinition.Type": "INVALID" | "WEB" | "WORKER" | "DATABASE";
    DeploymentEnv: {
      scopes?: string[];
      key?: string;
      value?: string;
      secret?: string;
    };
    DeploymentEvent: {
      id?: string;
      /** Format: date-time */
      when?: string;
      organization_id?: string;
      deployment_id?: string;
      type?: string;
      message?: string;
      metadata?: Record<string, never>;
    };
    DeploymentHealthCheck: {
      /**
       * An optional initial period in seconds to wait for the instance to become healthy, default is 5s
       * Format: int64
       */
      grace_period?: number;
      /**
       * An optional period in seconds between two health checks, default is 60s
       * Format: int64
       */
      interval?: number;
      /**
       * An optional number of consecutive failures before attempting to restart the service, default is 3
       * Format: int64
       */
      restart_limit?: number;
      /**
       * An optional maximum time to wait in seconds before considering the check as a failure, default is 5s
       * Format: int64
       */
      timeout?: number;
      tcp?: components["schemas"]["TCPHealthCheck"];
      http?: components["schemas"]["HTTPHealthCheck"];
    };
    DeploymentInstanceType: {
      scopes?: string[];
      type?: string;
    };
    DeploymentListItem: {
      id?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      allocated_at?: string;
      /** Format: date-time */
      started_at?: string;
      /** Format: date-time */
      succeeded_at?: string;
      /** Format: date-time */
      terminated_at?: string;
      organization_id?: string;
      app_id?: string;
      service_id?: string;
      parent_id?: string;
      child_id?: string;
      status?: components["schemas"]["Deployment.Status"];
      metadata?: components["schemas"]["DeploymentMetadata"];
      definition?: components["schemas"]["DeploymentDefinition"];
      messages?: string[];
      provisioning_info?: components["schemas"]["DeploymentProvisioningInfo"];
      database_info?: components["schemas"]["DeploymentDatabaseInfo"];
      /** Format: uint64 */
      version?: string;
      deployment_group?: string;
    };
    DeploymentMetadata: {
      trigger?: components["schemas"]["TriggerDeploymentMetadata"];
      database?: components["schemas"]["DatabaseDeploymentMetadata"];
      git?: components["schemas"]["GitDeploymentMetadata"];
      archive?: components["schemas"]["ArchiveDeploymentMetadata"];
    };
    DeploymentNeonPostgresDatabaseInfo: {
      /** Format: int64 */
      active_time_seconds?: string;
      /** Format: int64 */
      compute_time_seconds?: string;
      /** Format: int64 */
      written_data_bytes?: string;
      /** Format: int64 */
      data_transfer_bytes?: string;
      /** Format: int64 */
      data_storage_bytes_hour?: string;
      server_host?: string;
      /** Format: int64 */
      server_port?: number;
      endpoint_state?: string;
      /** Format: date-time */
      endpoint_last_active?: string;
      default_branch_id?: string;
      default_branch_name?: string;
      default_branch_state?: string;
      /** Format: int64 */
      default_branch_logical_size?: string;
      roles?: components["schemas"]["DeploymentNeonPostgresDatabaseInfoRole"][];
    };
    DeploymentNeonPostgresDatabaseInfoRole: {
      name?: string;
      secret_id?: string;
    };
    DeploymentPort: {
      /** Format: int64 */
      port?: number;
      /** One of http, http2, tcp */
      protocol?: string;
    };
    DeploymentProvisioningInfo: {
      /** @description The git sha for this build (we resolve the reference at the start of the build). */
      sha?: string;
      /** @description The docker image built as a result of this build. */
      image?: string;
      /** @description Some info about the build. */
      stages?: components["schemas"]["DeploymentProvisioningInfo.Stage"][];
    };
    "DeploymentProvisioningInfo.Stage": {
      name?: string;
      status?: components["schemas"]["DeploymentProvisioningInfo.Stage.Status"];
      messages?: string[];
      /** Format: date-time */
      started_at?: string;
      /** Format: date-time */
      finished_at?: string;
      build_attempts?: components["schemas"]["DeploymentProvisioningInfo.Stage.BuildAttempt"][];
    };
    "DeploymentProvisioningInfo.Stage.BuildAttempt": {
      /** Format: int64 */
      id?: number;
      status?: components["schemas"]["DeploymentProvisioningInfo.Stage.Status"];
      messages?: string[];
      /** Format: date-time */
      started_at?: string;
      /** Format: date-time */
      finished_at?: string;
    };
    /**
     * @default UNKNOWN
     * @enum {string}
     */
    "DeploymentProvisioningInfo.Stage.Status": "UNKNOWN" | "RUNNING" | "FAILED" | "COMPLETED" | "ABORTED";
    DeploymentRoute: {
      /** Format: int64 */
      port?: number;
      path?: string;
    };
    DeploymentScaling: {
      scopes?: string[];
      /** Format: int64 */
      min?: number;
      /** Format: int64 */
      max?: number;
      targets?: components["schemas"]["DeploymentScalingTarget"][];
    };
    DeploymentScalingTarget: {
      average_cpu?: components["schemas"]["DeploymentScalingTargetAverageCPU"];
      average_mem?: components["schemas"]["DeploymentScalingTargetAverageMem"];
      requests_per_second?: components["schemas"]["DeploymentScalingTargetRequestsPerSecond"];
      concurrent_requests?: components["schemas"]["DeploymentScalingTargetConcurrentRequests"];
      requests_response_time?: components["schemas"]["DeploymentScalingTargetRequestsResponseTime"];
    };
    DeploymentScalingTargetAverageCPU: {
      /** Format: int64 */
      value?: number;
    };
    DeploymentScalingTargetAverageMem: {
      /** Format: int64 */
      value?: number;
    };
    DeploymentScalingTargetConcurrentRequests: {
      /** Format: int64 */
      value?: number;
    };
    DeploymentScalingTargetRequestsPerSecond: {
      /** Format: int64 */
      value?: number;
    };
    DeploymentScalingTargetRequestsResponseTime: {
      /** Format: int64 */
      value?: number;
      /**
       * Format: int64
       * @description The quantile to use for autoscaling. For example, set to 95 to use the 95th
       * percentile (p95) for autoscaling.  Valid values are between 0 and 100.
       */
      quantile?: number;
    };
    DeploymentVolume: {
      /** the id of the volume */
      id?: string;
      /** the path where the volume is mounted to */
      path?: string;
      /**
       * optionally, explicitly choose the replica index to mount the volume to
       * Format: int64
       */
      replica_index?: number;
      /** scope of the associated */
      scopes?: string[];
    };
    DockerBuilder: {
      /** A path to the Dockerfile */
      dockerfile?: string;
      /** The docker ENTRYPOINT */
      entrypoint?: string[];
      /** The docker CMD */
      command?: string;
      /** The docker CMD args */
      args?: string[];
      /** The target for multi-stage builds */
      target?: string;
      /** A flag to run the container in privileged mode */
      privileged?: boolean;
    };
    DockerSource: {
      image?: string;
      command?: string;
      args?: string[];
      image_registry_secret?: string;
      entrypoint?: string[];
      /** A flag to run the container in privileged mode */
      privileged?: boolean;
    };
    GetDeploymentReply: {
      deployment?: components["schemas"]["Deployment"];
    };
    GitDeploymentMetadata: {
      last_provisioned_deployment_id?: string;
    };
    GitSource: {
      /** @description A url to a git repository (contains the provider as well) .e.g: github.com/koyeb/test. */
      repository?: string;
      /** A git branch that will be tracked for new commits and deployments will be created */
      branch?: string;
      /** A git tag that should be built */
      tag?: string;
      /** A git commit that should be built (useful for pinning to a commit, this will always be set when a deployment is created by a code push) */
      sha?: string;
      /** A command used to override the build command, run after all build steps — deprecated, use buildpack.build_command instead */
      build_command?: string;
      /** A command used to override the default run command - deprecated, use buildpack.run_command instead */
      run_command?: string;
      /** A flag to disable a new deployment when a push event is detected */
      no_deploy_on_push?: boolean;
      /** A subdirectory to use as the build directory */
      workdir?: string;
      buildpack?: components["schemas"]["BuildpackBuilder"];
      docker?: components["schemas"]["DockerBuilder"];
    };
    HTTPHeader: {
      key?: string;
      value?: string;
    };
    HTTPHealthCheck: {
      /**
       * The port to use to perform the health check, must be declared in the ports section
       * Format: int64
       */
      port?: number;
      /** The path to use to perform the HTTP health check */
      path?: string;
      /** An optional HTTP method to use to perform the health check, default is GET */
      method?: string;
      /** An optional list of HTTP headers to provide when performing the request, default is empty */
      headers?: components["schemas"]["HTTPHeader"][];
    };
    ListDeploymentEventsReply: {
      /** The collection of events */
      events?: components["schemas"]["DeploymentEvent"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /** The order in the request */
      order?: string;
    };
    ListDeploymentsReply: {
      /** The collection of deployments */
      deployments?: components["schemas"]["DeploymentListItem"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /**
       * The total number of items
       * Format: int64
       */
      count?: number;
    };
    NeonPostgresDatabase: {
      /** Format: int64 */
      pg_version?: number;
      region?: string;
      instance_type?: string;
      roles?: components["schemas"]["NeonPostgresDatabase.NeonRole"][];
      databases?: components["schemas"]["NeonPostgresDatabase.NeonDatabase"][];
    };
    "NeonPostgresDatabase.NeonDatabase": {
      name?: string;
      owner?: string;
    };
    "NeonPostgresDatabase.NeonRole": {
      name?: string;
      secret?: string;
    };
    NeonPostgresDatabaseDeploymentMetadata: {
      reset_role_passwords?: string[];
    };
    TCPHealthCheck: {
      /**
       * The port to use to perform the health check, must be declared in the ports section
       * Format: int64
       */
      port?: number;
    };
    TriggerDeploymentMetadata: {
      type?: components["schemas"]["TriggerDeploymentMetadata.TriggerType"];
      actor?: components["schemas"]["TriggerDeploymentMetadata.ActorType"];
      git?: components["schemas"]["TriggerGitDeploymentMetadata"];
    };
    /**
     * @default UNKNOWN_ACTOR
     * @enum {string}
     */
    "TriggerDeploymentMetadata.ActorType": "UNKNOWN_ACTOR" | "USER" | "SYSTEM";
    /**
     * @default UNKNOWN_TYPE
     * @enum {string}
     */
    "TriggerDeploymentMetadata.TriggerType": "UNKNOWN_TYPE" | "GIT" | "RESUME" | "DATABASE_SYNC";
    TriggerGitDeploymentMetadata: {
      provider?: components["schemas"]["TriggerGitDeploymentMetadata.Provider"];
      repository?: string;
      branch?: string;
      sha?: string;
      message?: string;
      sender_username?: string;
      sender_avatar_url?: string;
      sender_profile_url?: string;
    };
    /**
     * @default UNKNOWN
     * @enum {string}
     */
    "TriggerGitDeploymentMetadata.Provider": "UNKNOWN" | "GITHUB";
    Env: {
      key?: string;
      value?: string;
      secret?: string;
    };
    GetRegionalDeploymentReply: {
      regional_deployment?: components["schemas"]["RegionalDeployment"];
    };
    ListRegionalDeploymentEventsReply: {
      /** The collection of events */
      events?: components["schemas"]["RegionalDeploymentEvent"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /** The order in the request */
      order?: string;
    };
    ListRegionalDeploymentsReply: {
      /** The collection of regional deployments */
      regional_deployments?: components["schemas"]["RegionalDeploymentListItem"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /**
       * The total number of items
       * Format: int64
       */
      count?: number;
    };
    Port: {
      /** Format: int64 */
      port?: number;
      protocol?: string;
    };
    RegionalDeployment: {
      id?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      scheduled_at?: string;
      /** Format: date-time */
      allocated_at?: string;
      /** Format: date-time */
      started_at?: string;
      /** Format: date-time */
      succeeded_at?: string;
      /** Format: date-time */
      terminated_at?: string;
      organization_id?: string;
      app_id?: string;
      service_id?: string;
      region?: string;
      parent_id?: string;
      child_id?: string;
      status?: components["schemas"]["RegionalDeployment.Status"];
      messages?: string[];
      definition?: components["schemas"]["RegionalDeploymentDefinition"];
      datacenters?: string[];
      metadata?: components["schemas"]["RegionalDeploymentMetadata"];
      provisioning_info?: components["schemas"]["DeploymentProvisioningInfo"];
      role?: components["schemas"]["RegionalDeployment.Role"];
      use_kuma_v2?: boolean;
      use_kata?: boolean;
      /** Format: uint64 */
      version?: string;
      /** Legacy stuff */
      deployment_group?: string;
      deployment_id?: string;
    };
    /**
     * @default INVALID
     * @enum {string}
     */
    "RegionalDeployment.Role": "INVALID" | "ACTIVE" | "UPCOMING" | "CURRENT";
    /**
     * @default PENDING
     * @enum {string}
     */
    "RegionalDeployment.Status": "PENDING" | "PROVISIONING" | "SCHEDULED" | "CANCELING" | "CANCELED" | "ALLOCATING" | "STARTING" | "HEALTHY" | "DEGRADED" | "UNHEALTHY" | "STOPPING" | "STOPPED" | "ERRORING" | "ERROR";
    RegionalDeploymentDefinition: {
      name?: string;
      type?: components["schemas"]["RegionalDeploymentDefinition.Type"];
      routes?: components["schemas"]["Route"][];
      ports?: components["schemas"]["Port"][];
      env?: components["schemas"]["Env"][];
      region?: string;
      scaling?: components["schemas"]["Scaling"];
      instance_type?: string;
      deployment_group?: string;
      health_checks?: components["schemas"]["DeploymentHealthCheck"][];
      volumes?: components["schemas"]["RegionalDeploymentVolume"][];
      skip_cache?: boolean;
      use_kuma_v2?: boolean;
      docker?: components["schemas"]["DockerSource"];
      git?: components["schemas"]["GitSource"];
      archive?: components["schemas"]["ArchiveSource"];
    };
    /**
     * @default INVALID
     * @enum {string}
     */
    "RegionalDeploymentDefinition.Type": "INVALID" | "WEB" | "WORKER";
    RegionalDeploymentEvent: {
      id?: string;
      /** Format: date-time */
      when?: string;
      organization_id?: string;
      regional_deployment_id?: string;
      type?: string;
      message?: string;
      metadata?: Record<string, never>;
    };
    RegionalDeploymentListItem: {
      id?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      region?: string;
      status?: components["schemas"]["RegionalDeployment.Status"];
      messages?: string[];
      definition?: components["schemas"]["RegionalDeploymentDefinition"];
      use_kuma_v2?: boolean;
      use_kata?: boolean;
    };
    RegionalDeploymentMetadata: Record<string, never>;
    RegionalDeploymentVolume: {
      /** the id of the volume */
      id?: string;
      /** the path where the volume is mounted to */
      path?: string;
      /**
       * optionally, explicitly choose the replica index to mount the volume to
       * Format: int64
       */
      replica_index?: number;
    };
    Route: {
      /** Format: int64 */
      port?: number;
      path?: string;
    };
    Scaling: {
      /** Format: int64 */
      min?: number;
      /** Format: int64 */
      max?: number;
      targets?: components["schemas"]["DeploymentScalingTarget"][];
    };
    AutoRelease: {
      groups?: components["schemas"]["AutoRelease.Group"][];
    };
    /** Configuration extracted from the latest deployment in this deployment_group */
    "AutoRelease.Group": {
      name?: string;
      repository?: string;
      /** A git ref to track (.e.g: refs/tags/<tag> or refs/heads/<branch> */
      git_ref?: string;
      /** The last hash that was resolved (used to avoid triggering releases when things haven't changed) */
      latest_sha?: string;
    };
    AutocompleteReply: {
      /** List of available secrets */
      secrets?: string[];
      /** List of available user's environment variables */
      user_env?: string[];
      /** List of available system's environment variables */
      system_env?: string[];
    };
    AutocompleteRequest: {
      definition?: components["schemas"]["DeploymentDefinition"];
    };
    CreateService: {
      app_id?: string;
      definition?: components["schemas"]["DeploymentDefinition"];
    };
    CreateServiceReply: {
      service?: components["schemas"]["Service"];
    };
    DeleteServiceReply: Record<string, never>;
    DesiredDeployment: {
      groups?: components["schemas"]["DesiredDeployment.Group"][];
    };
    "DesiredDeployment.Group": {
      name?: string;
      deployment_ids?: string[];
    };
    GetServiceReply: {
      service?: components["schemas"]["Service"];
    };
    ListServiceEventsReply: {
      /** The collection of events */
      events?: components["schemas"]["ServiceEvent"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /** The order in the request */
      order?: string;
    };
    ListServicesReply: {
      services?: components["schemas"]["ServiceListItem"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /**
       * The total number of items
       * Format: int64
       */
      count?: number;
    };
    PauseServiceReply: Record<string, never>;
    RedeployReply: {
      deployment?: components["schemas"]["Deployment"];
    };
    "RedeployRequest.Info": {
      deployment_group?: string;
      sha?: string;
      use_cache?: boolean;
      /**
       * @description If set to true, the build stage will be skipped and the image coming from the last successful build step will be used instead.
       * The call fails if no previous successful builds happened.
       */
      skip_build?: boolean;
    };
    ResumeServiceReply: Record<string, never>;
    Service: {
      id?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      started_at?: string;
      /** Format: date-time */
      succeeded_at?: string;
      /** Format: date-time */
      paused_at?: string;
      /** Format: date-time */
      resumed_at?: string;
      /** Format: date-time */
      terminated_at?: string;
      name?: string;
      type?: components["schemas"]["Service.Type"];
      organization_id?: string;
      app_id?: string;
      status?: components["schemas"]["Service.Status"];
      messages?: string[];
      /** Format: uint64 */
      version?: string;
      active_deployment_id?: string;
      latest_deployment_id?: string;
      last_provisioned_deployment_id?: string;
      state?: components["schemas"]["ServiceState"];
    };
    /**
     * @default STARTING
     * @enum {string}
     */
    "Service.Status": "STARTING" | "HEALTHY" | "DEGRADED" | "UNHEALTHY" | "DELETING" | "DELETED" | "PAUSING" | "PAUSED" | "RESUMING";
    /**
     * @default INVALID_TYPE
     * @enum {string}
     */
    "Service.Type": "INVALID_TYPE" | "WEB" | "WORKER" | "DATABASE";
    ServiceEvent: {
      id?: string;
      /** Format: date-time */
      when?: string;
      organization_id?: string;
      service_id?: string;
      type?: string;
      message?: string;
      metadata?: Record<string, never>;
    };
    ServiceListItem: {
      id?: string;
      name?: string;
      type?: components["schemas"]["Service.Type"];
      organization_id?: string;
      app_id?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      created_at?: string;
      status?: components["schemas"]["Service.Status"];
      messages?: string[];
      /**
       * A version updated whenever this state changes (useful for caching)
       * Format: uint64
       */
      version?: string;
      state?: components["schemas"]["ServiceState"];
      active_deployment_id?: string;
      latest_deployment_id?: string;
    };
    ServiceState: {
      desired_deployment?: components["schemas"]["DesiredDeployment"];
      auto_release?: components["schemas"]["AutoRelease"];
    };
    UpdateService: {
      definition?: components["schemas"]["DeploymentDefinition"];
      metadata?: components["schemas"]["DeploymentMetadata"];
      /**
       * @description If set to true, the build stage will be skipped and the image coming from the last successful build step will be used instead.
       * The call fails if no previous successful builds happened.
       */
      skip_build?: boolean;
      /** If set, do not trigger a deployment, only store the new settings */
      save_only?: boolean;
    };
    UpdateServiceReply: {
      service?: components["schemas"]["Service"];
    };
    CreateDomain: {
      name?: string;
      type?: components["schemas"]["Domain.Type"];
      /** to auto-attach to an app. Optional */
      app_id?: string;
    };
    CreateDomainReply: {
      domain?: components["schemas"]["Domain"];
    };
    DeleteDomainReply: Record<string, never>;
    GetDomainReply: {
      domain?: components["schemas"]["Domain"];
    };
    ListDomainsReply: {
      domains?: components["schemas"]["Domain"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /**
       * The total number of items
       * Format: int64
       */
      count?: number;
    };
    RefreshDomainStatusReply: Record<string, never>;
    UpdateDomain: {
      /** @description To attach or detach from an app for custom domain. */
      app_id?: string;
      /** @description To change subdomain for auto-assigned domain. */
      subdomain?: string;
    };
    UpdateDomainReply: {
      domain?: components["schemas"]["Domain"];
    };
    GetInstanceReply: {
      instance?: components["schemas"]["Instance"];
    };
    Instance: {
      id?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      organization_id?: string;
      app_id?: string;
      service_id?: string;
      regional_deployment_id?: string;
      allocation_id?: string;
      type?: string;
      /** Format: int64 */
      replica_index?: number;
      region?: string;
      datacenter?: string;
      hypervisor?: string;
      status?: components["schemas"]["Instance.Status"];
      messages?: string[];
      /** Format: date-time */
      started_at?: string;
      /** Format: date-time */
      succeeded_at?: string;
      /** Format: date-time */
      terminated_at?: string;
      /**
       * @description WARNING: Please don't use the following attribute.
       * Koyeb doesn't guarantee backwards compatible breaking change and reserve the right to completely drop it without notice.
       * USE AT YOUR OWN RISK.
       */
      xyz_deployment_id?: string;
    };
    /**
     * @default ALLOCATING
     * @enum {string}
     */
    "Instance.Status": "ALLOCATING" | "STARTING" | "HEALTHY" | "UNHEALTHY" | "STOPPING" | "STOPPED" | "ERROR" | "SLEEPING";
    InstanceEvent: {
      id?: string;
      /** Format: date-time */
      when?: string;
      organization_id?: string;
      instance_id?: string;
      type?: string;
      message?: string;
      metadata?: Record<string, never>;
    };
    InstanceListItem: {
      id?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      organization_id?: string;
      app_id?: string;
      service_id?: string;
      regional_deployment_id?: string;
      allocation_id?: string;
      type?: string;
      /** Format: int64 */
      replica_index?: number;
      region?: string;
      datacenter?: string;
      status?: components["schemas"]["Instance.Status"];
      messages?: string[];
      /**
       * @description WARNING: Please don't use the following attribute.
       * Koyeb doesn't guarantee backwards compatible breaking change and reserve the right to completely drop it without notice.
       * USE AT YOUR OWN RISK.
       */
      xyz_deployment_id?: string;
    };
    ListInstanceEventsReply: {
      /** The collection of events */
      events?: components["schemas"]["InstanceEvent"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /** The order in the request */
      order?: string;
    };
    ListInstancesReply: {
      /** The collection of instances */
      instances?: components["schemas"]["InstanceListItem"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /**
       * The total number of items
       * Format: int64
       */
      count?: number;
      /** The order in the request */
      order?: string;
    };
    "kgitproxy.Branch": {
      id?: string;
      organization_id?: string;
      repository_id?: string;
      name?: string;
      is_default?: boolean;
      is_protected?: boolean;
      provider?: components["schemas"]["kgitproxy.RepositoryProvider"];
    };
    "kgitproxy.GitHubRepository": {
      github_id?: string;
    };
    "kgitproxy.ListBranchesReply": {
      /** @description The collection of branches. */
      branches?: components["schemas"]["kgitproxy.Branch"][];
      /**
       * Format: int64
       * @description The limit in the request.
       */
      limit?: number;
      /**
       * Format: int64
       * @description The offset in the request.
       */
      offset?: number;
      /**
       * Format: int64
       * @description The total number of items.
       */
      count?: number;
    };
    "kgitproxy.ListRepositoriesReply": {
      /** @description The collection of repositories. */
      repositories?: components["schemas"]["kgitproxy.Repository"][];
      /**
       * Format: int64
       * @description The limit in the request.
       */
      limit?: number;
      /**
       * Format: int64
       * @description The offset in the request.
       */
      offset?: number;
      /**
       * Format: int64
       * @description The total number of items.
       */
      count?: number;
    };
    "kgitproxy.Repository": {
      id?: string;
      organization_id?: string;
      name?: string;
      url?: string;
      description?: string;
      is_private?: boolean;
      is_disabled?: boolean;
      default_branch?: string;
      provider?: components["schemas"]["kgitproxy.RepositoryProvider"];
      /** Format: date-time */
      last_push_date?: string;
      github?: components["schemas"]["kgitproxy.GitHubRepository"];
    };
    /**
     * @default INVALID_PROVIDER
     * @enum {string}
     */
    "kgitproxy.RepositoryProvider": "INVALID_PROVIDER" | "GITHUB";
    "kgitproxy.ResyncOrganizationReply": Record<string, never>;
    "ksearch.App": {
      id?: string;
      organization_id?: string;
      name?: string;
    };
    "ksearch.GlobalDeployment": {
      id?: string;
      organization_id?: string;
      app_id?: string;
      service_id?: string;
    };
    "ksearch.Instance": {
      id?: string;
      organization_id?: string;
      app_id?: string;
      service_id?: string;
      allocation_id?: string;
    };
    "ksearch.Organization": {
      id?: string;
      name?: string;
    };
    "ksearch.RegionalDeployment": {
      id?: string;
      organization_id?: string;
      app_id?: string;
      service_id?: string;
      region?: string;
    };
    "ksearch.SearchReply": {
      organizations?: components["schemas"]["ksearch.Organization"][];
      users?: components["schemas"]["ksearch.User"][];
      apps?: components["schemas"]["ksearch.App"][];
      services?: components["schemas"]["ksearch.Service"][];
      global_deployments?: components["schemas"]["ksearch.GlobalDeployment"][];
      regional_deployments?: components["schemas"]["ksearch.RegionalDeployment"][];
      instances?: components["schemas"]["ksearch.Instance"][];
    };
    "ksearch.Service": {
      id?: string;
      organization_id?: string;
      app_id?: string;
      name?: string;
    };
    "ksearch.User": {
      id?: string;
      email?: string;
      name?: string;
      github_user?: string;
    };
    GetRegionReply: {
      region?: components["schemas"]["Region"];
    };
    ListRegionsReply: {
      regions?: components["schemas"]["RegionListItem"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /**
       * The total number of items
       * Format: int64
       */
      count?: number;
    };
    Region: {
      /** The id of the region */
      id?: string;
      /** The name of the region */
      name?: string;
      /** The coordinates of the region (lat/long) */
      coordinates?: string[];
      /** The status of the region */
      status?: string;
      /** A list of instances available in this region */
      instances?: string[];
      /** A list of datacenters available in this region */
      datacenters?: string[];
      /** Are the volumes enabled for this instance type */
      volumes_enabled?: boolean;
    };
    RegionListItem: {
      /** The id of the region */
      id?: string;
      /** The name of the region */
      name?: string;
      /** The coordinates of the region (lat/long) */
      coordinates?: string[];
      /** The status of the region */
      status?: string;
      /** A list of instances available in this region */
      instances?: string[];
      /** A list of datacenters available in this region */
      datacenters?: string[];
      /** Are the volumes enabled for this instance type */
      volumes_enabled?: boolean;
    };
    DatacenterListItem: {
      /** e.g. "par1" */
      id?: string;
      /** e.g. "par" */
      region_id?: string;
      /** e.g. "all-par1.infra.prod.koyeb.com" */
      domain?: string;
      /** e.g. "8.856614" ,"2.352221"? */
      coordinates?: string[];
      /** e.g. true */
      use_kata?: boolean;
      /** e.g. true */
      use_gpu?: boolean;
      /** e.g. true */
      use_kuma?: boolean;
    };
    ListDatacentersReply: {
      datacenters?: components["schemas"]["DatacenterListItem"][];
    };
    CatalogGPUDetails: {
      /**
       * The number of GPUs
       * Format: int64
       */
      count?: number;
      /** The brand of GPU */
      brand?: string;
      /** GPU memory */
      memory?: string;
      /** Name of GPU */
      name?: string;
    };
    CatalogInstance: {
      /** The name of the instance */
      id?: string;
      /** A short description of the instance */
      description?: string;
      /**
       * Format: int64
       * @description The number of cpus. Deprecated. Use vcpu_shares instead.
       */
      vcpu?: number;
      /** The memory in bytes in a format like 5MB */
      memory?: string;
      /** The size of the disk in bytes in a format like 5MB */
      disk?: string;
      /** The price to pay per hour */
      price_hourly?: string;
      /** The price to pay per month */
      price_monthly?: string;
      /** The regions where this instance type is available */
      regions?: string[];
      /** The status of the instance */
      status?: string;
      /** The plan required to use instance */
      require_plan?: string[];
      /**
       * Format: float
       * @description The number of vcpu shares reserved for the instance.
       */
      vcpu_shares?: number;
      /** The display name of the instance */
      display_name?: string;
      /** Aliases */
      aliases?: string[];
      /** The type of the instance (e.g. "gpu") */
      type?: string;
      gpu?: components["schemas"]["CatalogGPUDetails"];
      /** Allowed service types for this instance (e.g. ["web", "worker"]) */
      service_types?: string[];
      /** Are the volumes enabled for this instance type */
      volumes_enabled?: boolean;
    };
    CatalogInstanceListItem: {
      /** The name of the instance */
      id?: string;
      /** A short description of the instance */
      description?: string;
      /**
       * Format: int64
       * @description The number of cpus. Deprecated. Use vcpu_shares instead.
       */
      vcpu?: number;
      /** The memory in bytes in a format like 5MB */
      memory?: string;
      /** The size of the disk in bytes in a format like 5MB */
      disk?: string;
      /** The price to pay per hour */
      price_hourly?: string;
      /** The price to pay per month */
      price_monthly?: string;
      /** The regions where this instance type is available */
      regions?: string[];
      /** The status of the instance */
      status?: string;
      /** The plan required to use instance */
      require_plan?: string[];
      /**
       * Format: float
       * @description The number of vcpu shares reserved for the instance.
       */
      vcpu_shares?: number;
      /** The display name of the instance */
      display_name?: string;
      /** Aliases */
      aliases?: string[];
      /** The type of the instance (e.g. "gpu") */
      type?: string;
      gpu?: components["schemas"]["CatalogGPUDetails"];
      /** Allowed service types for this instance (e.g. ["web", "worker"]) */
      service_types?: string[];
      /** Are the volumes enabled for this instance type */
      volumes_enabled?: boolean;
    };
    GetCatalogInstanceReply: {
      instance?: components["schemas"]["CatalogInstance"];
    };
    ListCatalogInstancesReply: {
      instances?: components["schemas"]["CatalogInstanceListItem"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /**
       * The total number of items
       * Format: int64
       */
      count?: number;
    };
    CreateCredential: {
      /** Credential name */
      name?: string;
      /** Credential description */
      description?: string;
      type?: components["schemas"]["Credential.Type"];
      /** Organization id for user credential */
      organization_id?: string;
    };
    CreateCredentialReply: {
      credential?: components["schemas"]["Credential"];
    };
    Credential: {
      id?: string;
      type?: components["schemas"]["Credential.Type"];
      name?: string;
      token?: string;
      description?: string;
      user_id?: string;
      organization_id?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      created_at?: string;
    };
    /**
     * @default INVALID
     * @enum {string}
     */
    "Credential.Type": "INVALID" | "USER" | "ORGANIZATION";
    DeleteCredentialReply: Record<string, never>;
    GetCredentialReply: {
      credential?: components["schemas"]["Credential"];
    };
    ListCredentialsReply: {
      credentials?: components["schemas"]["Credential"][];
      /** Format: int64 */
      limit?: number;
      /** Format: int64 */
      offset?: number;
      /** Format: int64 */
      count?: number;
    };
    UpdateCredentialReply: {
      credential?: components["schemas"]["Credential"];
    };
    GetIntercomProfileReply: {
      hash?: string;
    };
    AppsSummary: {
      /**
       * Total number of apps
       * Format: int64
       */
      total?: string;
      /** Number of apps grouped by status */
      by_status?: {
        [key: string]: string;
      };
    };
    DomainsSummary: {
      /**
       * Total number of domains
       * Format: int64
       */
      total?: string;
      /** Number of domains grouped by status */
      by_status?: {
        [key: string]: string;
      };
    };
    GetOrganizationSummaryReply: {
      summary?: components["schemas"]["OrganizationSummary"];
    };
    InstancesSummary: {
      /**
       * Total number of instances
       * Format: int64
       */
      total?: string;
      /** Number of instances grouped by type */
      by_type?: {
        [key: string]: string;
      };
    };
    MembersSummary: {
      /**
       * Number of members
       * Format: int64
       */
      total?: string;
      /** Number of invitations grouped by status */
      invitations_by_status?: {
        [key: string]: string;
      };
    };
    NeonPostgresSummary: {
      /**
       * Total number of databases
       * Format: int64
       */
      total?: string;
      /** Number of databases grouped by instance type */
      by_instance_type?: {
        [key: string]: string;
      };
    };
    OrganizationSummary: {
      organization_id?: string;
      instances?: components["schemas"]["InstancesSummary"];
      apps?: components["schemas"]["AppsSummary"];
      /** Number of services grouped by type */
      services?: {
        [key: string]: components["schemas"]["ServiceSummary"];
      };
      domains?: components["schemas"]["DomainsSummary"];
      secrets?: components["schemas"]["SecretsSummary"];
      neon_postgres?: components["schemas"]["NeonPostgresSummary"];
      members?: components["schemas"]["MembersSummary"];
    };
    SecretsSummary: {
      /**
       * Total number of secrets
       * Format: int64
       */
      total?: string;
      /** Number of secrets grouped by type */
      by_type?: {
        [key: string]: string;
      };
    };
    ServiceSummary: {
      /**
       * Total number of services
       * Format: int64
       */
      total?: string;
      /** Number of services grouped by status */
      by_status?: {
        [key: string]: string;
      };
    };
    GetSubscriptionReply: {
      subscription?: components["schemas"]["Subscription"];
    };
    Subscription: {
      id?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: uint64 */
      version?: string;
      organization_id?: string;
      stripe_subscription_id?: string;
      status?: components["schemas"]["Subscription.Status"];
      messages?: string[];
      has_pending_update?: boolean;
      stripe_pending_invoice_id?: string;
      /** Format: date-time */
      terminate_at?: string;
      /** Format: date-time */
      canceled_at?: string;
      /** Format: date-time */
      terminated_at?: string;
      /** Format: date-time */
      current_period_start?: string;
      /** Format: date-time */
      current_period_end?: string;
      currency?: string;
      /** Format: int64 */
      amount_payable?: string;
      /** Format: int64 */
      amount_paid?: string;
      /** Format: int64 */
      amount_remaining?: string;
      payment_failure?: components["schemas"]["Subscription.PaymentFailure"];
    };
    "Subscription.PaymentFailure": {
      /** Format: date-time */
      failed_at?: string;
      /** Format: date-time */
      next_attempt?: string;
      /** Format: int64 */
      attempt_count?: string;
      error_code?: string;
      error_reason?: string;
      error_type?: string;
      error_message?: string;
      payment_method_required?: boolean;
      redirect_url?: string;
      stripe_sdk?: components["schemas"]["Subscription.PaymentFailure.StripeSDK"];
    };
    "Subscription.PaymentFailure.StripeSDK": {
      client_secret_key?: string;
      raw_json?: string;
    };
    /**
     * @default INVALID
     * @enum {string}
     */
    "Subscription.Status": "INVALID" | "CREATED" | "ACTIVE" | "WARNING" | "URGENT" | "CANCELING" | "CANCELED" | "TERMINATING" | "TERMINATED";
    AcceptOrganizationInvitationReply: {
      invitation?: components["schemas"]["OrganizationInvitation"];
    };
    /**
     * @default signin
     * @enum {string}
     */
    Action: "signin" | "signup" | "register";
    CannyAuthReply: {
      token?: string;
    };
    CannyAuthRequest: Record<string, never>;
    /**
     * Create new account
     * @description Create new account
     * @example {
     *   "email": "john@snow.com",
     *   "password": "..."
     * }
     */
    CreateAccountRequest: {
      email: string;
      password: string;
      name?: string;
      captcha?: string;
    };
    CreateOrganizationReply: {
      organization?: components["schemas"]["Organization"];
    };
    CreateOrganizationRequest: {
      name?: string;
    };
    DeactivateOrganizationReply: {
      organization?: components["schemas"]["Organization"];
    };
    DeclineOrganizationInvitationReply: {
      invitation?: components["schemas"]["OrganizationInvitation"];
    };
    DeleteOrganizationReply: {
      organization?: components["schemas"]["Organization"];
    };
    DiscourseAuthReply: {
      sso?: string;
      sig?: string;
    };
    DiscourseAuthRequest: {
      payload?: string;
      sig?: string;
    };
    GetGithubInstallationReply: {
      installation_id?: string;
      installation_url?: string;
      name?: string;
      avatar_url?: string;
      status?: components["schemas"]["kgitproxy.GithubInstallation.Status"];
      /** Format: date-time */
      installed_at?: string;
      /** Format: date-time */
      suspended_at?: string;
      indexing_status?: components["schemas"]["kgitproxy.IndexingStatus"];
      /** Format: int64 */
      indexed_repositories?: number;
      /** Format: int64 */
      total_repositories?: number;
    };
    /** @description A list of providers which you can use for single sign-on. */
    GetOAuthOptionsReply: {
      oauth_providers?: components["schemas"]["OAuthProvider"][];
    };
    GetOrganizationReply: {
      organization?: components["schemas"]["Organization"];
    };
    GetUserOrganizationInvitationReply: {
      invitation?: components["schemas"]["OrganizationInvitation"];
    };
    GithubInstallationCallbackReply: Record<string, never>;
    GithubInstallationCallbackRequest: {
      installation_id?: string;
      setup_action?: string;
      state?: string;
    };
    GithubInstallationReply: {
      /** The github app name */
      app_name?: string;
      /**
       * The github app id
       * Format: int64
       */
      app_id?: string;
      /** The url to start the installation flow */
      url?: string;
      /** The state required by the protocol, it is only valid 10 minutes and encodes information about the type of flow */
      state?: string;
    };
    GithubInstallationRequest: {
      /** A small (limited to 400 characters) string of arbitrary metadata which will be encoded in the state */
      metadata?: string;
    };
    HasUnpaidInvoicesReply: {
      has_unpaid_invoices?: boolean;
    };
    InviteUserRequest: {
      email?: string;
      name?: string;
      message?: string;
    };
    ListUserOrganizationInvitationsReply: {
      /** The collection of organization invitations */
      invitations?: components["schemas"]["OrganizationInvitation"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /**
       * The total number of items
       * Format: int64
       */
      count?: number;
    };
    LoginReply: {
      token?: components["schemas"]["Token"];
    };
    ManageReply: {
      url?: string;
    };
    NextInvoiceReply: {
      stripe_invoice?: Record<string, never>;
    };
    OAuthCallbackReply: {
      token?: components["schemas"]["Token"];
    };
    OAuthCallbackRequest: {
      /** The state created at the origin of the OAuth flow */
      state?: string;
      /** The code returned by the OAuth provider */
      code?: string;
    };
    OAuthProvider: {
      /** The name of the provider (.e.g github, google) */
      id?: string;
      /** The URL to call to initiate the OAuth flow */
      url?: string;
      /** The OAuth state required by the protocol, it is only valid 10 minutes and encodes information about the type of flow */
      state?: string;
    };
    /** Represent an Organization */
    Organization: {
      id?: string;
      address1?: string;
      address2?: string;
      city?: string;
      postal_code?: string;
      state?: string;
      country?: string;
      company?: boolean;
      vat_number?: string;
      billing_name?: string;
      billing_email?: string;
      name?: string;
      plan?: components["schemas"]["Plan"];
      /** Format: date-time */
      plan_updated_at?: string;
      has_payment_method?: boolean;
      subscription_id?: string;
      current_subscription_id?: string;
      latest_subscription_id?: string;
      signup_qualification?: Record<string, never>;
      status?: components["schemas"]["Organization.Status"];
      status_message?: components["schemas"]["OrganizationDetailedStatus"];
      deactivation_reason?: components["schemas"]["Organization.DeactivationReason"];
      verified?: boolean;
      qualifies_for_hobby23?: boolean;
      /** Format: date-time */
      reprocess_after?: string;
    };
    /**
     * @default INVALID
     * @enum {string}
     */
    "Organization.DeactivationReason": "INVALID" | "REQUESTED_BY_OWNER" | "SUBSCRIPTION_TERMINATION" | "LOCKED_BY_ADMIN" | "VERIFICATION_FAILED";
    /**
     * @default WARNING
     * @enum {string}
     */
    "Organization.Status": "WARNING" | "LOCKED" | "ACTIVE" | "DEACTIVATING" | "DEACTIVATED" | "DELETING" | "DELETED";
    /**
     * @default NEW
     * @enum {string}
     */
    OrganizationDetailedStatus: "NEW" | "EMAIL_NOT_VALIDATED" | "BILLING_INFO_MISSING" | "LOCKED" | "PAYMENT_FAILURE" | "VALID" | "PENDING_VERIFICATION" | "VERIFICATION_FAILED" | "REVIEWING_ACCOUNT" | "PLAN_UPGRADE_REQUIRED";
    OrganizationInvitation: {
      id?: string;
      email?: string;
      role?: components["schemas"]["UserRole.Role"];
      status?: components["schemas"]["OrganizationInvitation.Status"];
      /** Format: date-time */
      expires_at?: string;
      organization_id?: string;
      organization?: components["schemas"]["PublicOrganization"];
      invitee_id?: string;
      invitee?: components["schemas"]["PublicUser"];
      inviter_id?: string;
      inviter?: components["schemas"]["PublicUser"];
    };
    /**
     * @default INVALID
     * @enum {string}
     */
    "OrganizationInvitation.Status": "INVALID" | "PENDING" | "ACCEPTED" | "REFUSED" | "EXPIRED";
    /**
     * @default hobby
     * @enum {string}
     */
    Plan: "hobby" | "starter" | "startup" | "business" | "enterprise" | "internal" | "hobby23" | "no_plan";
    PublicOrganization: {
      id?: string;
      name?: string;
      plan?: components["schemas"]["Plan"];
      status?: components["schemas"]["Organization.Status"];
    };
    PublicUser: {
      id?: string;
      email?: string;
      name?: string;
      avatar_url?: string;
      github_id?: string;
      github_user?: string;
    };
    ReactivateOrganizationReply: {
      organization?: components["schemas"]["Organization"];
    };
    ResendEmailValidationReply: Record<string, never>;
    ResendEmailValidationRequest: Record<string, never>;
    ResetPasswordReply: Record<string, never>;
    /**
     * @example {
     *   "email": "john@snow.com"
     * }
     */
    ResetPasswordRequest: {
      email?: string;
    };
    /**
     * @example {
     *   "id": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
     *   "expires": "2022-09-08T14:00:00Z",
     *   "user_id": "996d7822-6b58-11e9-956f-32001b70f000",
     *   "organization_id": "9f33b2c6-6b58-11e9-883c-32001b70f000"
     * }
     */
    Token: {
      id?: string;
      user_id?: string;
      organization_id?: string;
      /** Format: date-time */
      expires_at?: string;
    };
    UpdateOrganizationPlanReply: {
      organization?: components["schemas"]["Organization"];
    };
    UpdateOrganizationReply: {
      organization?: components["schemas"]["Organization"];
    };
    /**
     * @example {
     *   "id": "...",
     *   "password": "..."
     * }
     */
    UpdatePasswordRequest: {
      id?: string;
      password?: string;
    };
    "UpdateUserRequest.UserUpdateBody": {
      id?: string;
      email?: string;
      current_password?: string;
      password?: string;
      newsletter_subscribed?: boolean;
      name?: string;
    };
    UpsertSignupQualificationReply: {
      organization?: components["schemas"]["Organization"];
    };
    /**
     * Represent a User
     * @example {
     *   "id": "78352123-a06f-4ec2-81ed-27a056725385",
     *   "email": "john@snow.com",
     *   "name": "John Snow",
     *   "avatar_url": "https://www.gravatar.com/avatar/00000000000000000000000000000000",
     *   "is_admin": false,
     *   "is_test": true,
     *   "two_factor_authentication": false,
     *   "last_login": "0001-01-01T00:00:00Z",
     *   "last_login_id": "10.1.1.1",
     *   "updated_at": "0001-01-01T00:00:00Z",
     *   "created_at": "0001-01-01T00:00:00Z",
     *   "newsletter_subscribed": true,
     *   "email_validated": true
     * }
     */
    User: {
      id?: string;
      email?: string;
      avatar_url?: string;
      two_factor_authentication?: boolean;
      /** Format: date-time */
      last_login?: string;
      last_login_ip?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      created_at?: string;
      newsletter_subscribed?: boolean;
      github_id?: string;
      github_user?: string;
      flags?: components["schemas"]["UserFlags"][];
      name?: string;
      email_validated?: boolean;
    };
    /**
     * - ADMIN: A user is an admin user
     *  - TEST: A user is a test user
     *  - RESTRICTED: Whether this account as restricted access
     *  - ACTIVE: Whether this account is active
     *  - BETA: Account in beta program
     * @default ADMIN
     * @enum {string}
     */
    UserFlags: "ADMIN" | "TEST" | "RESTRICTED" | "ACTIVE" | "BETA";
    UserReply: {
      user?: components["schemas"]["User"];
    };
    /**
     * @default INVALID
     * @enum {string}
     */
    "UserRole.Role": "INVALID" | "OWNER";
    Empty: Record<string, never>;
    /**
     * @default INVALID
     * @enum {string}
     */
    "kgitproxy.GithubInstallation.Status": "INVALID" | "INSTALLED" | "SUSPENDED" | "DELETED";
    /**
     * @default INVALID_INDEXING_STATUS
     * @enum {string}
     */
    "kgitproxy.IndexingStatus": "INVALID_INDEXING_STATUS" | "NOT_STARTED" | "IN_PROGRESS" | "COMPLETED";
    ConfirmPaymentAuthorizationReply: {
      payment_method?: components["schemas"]["PaymentMethod"];
    };
    CreatePaymentAuthorizationReply: {
      payment_method?: components["schemas"]["PaymentMethod"];
    };
    CreatePaymentAuthorizationRequest: Record<string, never>;
    DeletePaymentMethodReply: Record<string, never>;
    GetPaymentMethodReply: {
      payment_method?: components["schemas"]["PaymentMethod"];
    };
    ListPaymentMethodsReply: {
      /** The collection of payment methods */
      payment_methods?: components["schemas"]["PaymentMethod"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /**
       * The total number of items
       * Format: int64
       */
      count?: number;
    };
    PaymentMethod: {
      id?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: uint64 */
      version?: string;
      organization_id?: string;
      type?: string;
      provider?: string;
      status?: components["schemas"]["PaymentMethod.Status"];
      messages?: string[];
      stripe_payment_method_id?: string;
      /** Format: date-time */
      authorization_verified_at?: string;
      /** Format: date-time */
      authorization_canceled_at?: string;
      authorization_stripe_payment_intent_id?: string;
      authorization_stripe_payment_intent_client_secret?: string;
      card_brand?: string;
      card_country?: string;
      card_funding?: string;
      card_fingerprint?: string;
      card_last_digits?: string;
      /** Format: int64 */
      card_expiration_month?: number;
      /** Format: int64 */
      card_expiration_year?: number;
    };
    /**
     * @default INVALID
     * @enum {string}
     */
    "PaymentMethod.Status": "INVALID" | "CREATED" | "AUTHORIZED" | "DECLINED" | "CANCELED" | "EXPIRED" | "UNCHECKED";
    DeleteUserReply: {
      user?: components["schemas"]["User"];
    };
    GetQuotasReply: {
      quotas?: components["schemas"]["Quotas"];
    };
    PersistentVolumeQuotas: {
      /**
       * Format: int64
       * @description MaxTotalSize for all volumes on a region (in Gigabyte / GB).
       */
      max_total_size?: number;
      /**
       * Format: int64
       * @description MaxVolumeSize for one volume (in Gigabyte / GB).
       */
      max_volume_size?: number;
      /**
       * Format: int64
       * @description MaxPerInstanceSize for all volumes on an instance (in Gigabyte / GB).
       */
      max_per_instance_size?: number;
    };
    Quotas: {
      /** Format: int64 */
      apps?: string;
      /** Format: int64 */
      services?: string;
      /** Format: int64 */
      domains?: string;
      /** Format: int64 */
      services_by_app?: string;
      /** Format: int64 */
      service_provisioning_concurrency?: string;
      /** Format: int64 */
      memory_mb?: string;
      instance_types?: string[];
      regions?: string[];
      /** Format: int64 */
      max_organization_members?: string;
      max_instances_by_type?: {
        [key: string]: string;
      };
      persistent_volumes_by_region?: {
        [key: string]: components["schemas"]["PersistentVolumeQuotas"];
      };
    };
    ListOrganizationMembersReply: {
      /** The collection of organization members */
      members?: components["schemas"]["OrganizationMember"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /**
       * The total number of items
       * Format: int64
       */
      count?: number;
    };
    OrganizationMember: {
      id?: string;
      organization_id?: string;
      user_id?: string;
      /** Format: date-time */
      joined_at?: string;
      role?: components["schemas"]["UserRole.Role"];
      status?: components["schemas"]["OrganizationMember.Status"];
      user?: components["schemas"]["PublicUser"];
      organization?: components["schemas"]["PublicOrganization"];
    };
    /**
     * @default INVALID
     * @enum {string}
     */
    "OrganizationMember.Status": "INVALID" | "ACTIVE" | "DELETED";
    RemoveOrganizationMemberReply: {
      member?: components["schemas"]["OrganizationMember"];
    };
    /**
     * @example {
     *   "email": "john@snow.com",
     *   "password": "..."
     * }
     */
    LoginRequest: {
      /** User email */
      email?: string;
      /** User password */
      password?: string;
      /** (Optional) Login into this organization */
      organization_id?: string;
    };
    LogoutReply: Record<string, never>;
    ConfirmOrganizationActionReply: Record<string, never>;
    CreateOrganizationInvitationReply: {
      invitation?: components["schemas"]["OrganizationInvitation"];
    };
    CreateOrganizationInvitationRequest: {
      /** The email of the person to invite */
      email?: string;
    };
    DeleteOrganizationInvitationReply: Record<string, never>;
    GetOrganizationInvitationReply: {
      invitation?: components["schemas"]["OrganizationInvitation"];
    };
    ListOrganizationInvitationsReply: {
      /** The collection of organization invitations */
      invitations?: components["schemas"]["OrganizationInvitation"][];
      /**
       * The limit in the request
       * Format: int64
       */
      limit?: number;
      /**
       * The offset in the request
       * Format: int64
       */
      offset?: number;
      /**
       * The total number of items
       * Format: int64
       */
      count?: number;
    };
    ResendOrganizationInvitationReply: {
      invitation?: components["schemas"]["OrganizationInvitation"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Tails logs */
  TailLogs: {
    parameters: {
      query?: {
        type?: string;
        app_id?: string;
        service_id?: string;
        deployment_id?: string;
        regional_deployment_id?: string;
        instance_id?: string;
        stream?: string;
        start?: string;
        limit?: string;
      };
    };
    responses: {
      /** @description A successful response.(streaming responses) */
      200: {
        content: {
          "*/*": {
            result?: components["schemas"]["LogEntry"];
            error?: components["schemas"]["google.rpc.Status"];
          };
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  GetMetrics: {
    parameters: {
      query?: {
        /** @description ID of the service to query instances metrics for. Ignored if instance_id is set. */
        service_id?: string;
        /** @description ID of the instance to query metrics for. */
        instance_id?: string;
        /** @description Metric to query. */
        name?: "UNKNOWN" | "CPU_TOTAL_PERCENT" | "MEM_RSS" | "HTTP_THROUGHPUT" | "HTTP_RESPONSE_TIME_50P" | "HTTP_RESPONSE_TIME_90P" | "HTTP_RESPONSE_TIME_99P" | "HTTP_RESPONSE_TIME_MAX" | "PUBLIC_DATA_TRANSFER_IN" | "PUBLIC_DATA_TRANSFER_OUT";
        /** @description (Optional) Defaults to an hour prior to end. */
        start?: string;
        /** @description (Optional) Defaults to now. */
        end?: string;
        /** @description (Optional) Must be a valid duration in hours (h) or minutes (m). Defaulst to 5m. */
        step?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetMetricsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /**
   * Exec Command
   * @description This endpoint opens a websocket. Once open, all frames going through the websocket should be formatted in JSON. Input frames should match the format specified below. Output frames will match the response schema.
   */
  ExecCommand: {
    parameters: {
      query?: {
        /** @description ID of the resource to exec on. */
        id?: string;
        /** @description Command to exec. Mandatory in the first frame sent */
        "body.command"?: string[];
        "body.tty_size.height"?: number;
        "body.tty_size.width"?: number;
        /** @description Data is base64 encoded */
        "body.stdin.data"?: string;
        /** @description Indicate last data frame */
        "body.stdin.close"?: boolean;
        /** @description Disable TTY. It's enough to specify it in the first frame */
        "body.disableTty"?: boolean;
        /** @description When specified, it is used to determine if the kind of resource the id refers to. If missing, defaults to the instance id. */
        id_type?: "INVALID" | "INSTANCE_ID" | "SERVICE_ID";
      };
    };
    responses: {
      /** @description A successful response.(streaming responses) */
      200: {
        content: {
          "*/*": {
            result?: components["schemas"]["ExecCommandReply"];
            error?: components["schemas"]["google.rpc.Status"];
          };
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  ListActivities: {
    parameters: {
      query?: {
        limit?: string;
        offset?: string;
        /** @description (Optional) Filter on object type */
        types?: string[];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ActivityList"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  ListNotifications: {
    parameters: {
      query?: {
        limit?: string;
        offset?: string;
        mark_read?: string;
        mark_seen?: string;
        unread?: string;
        unseen?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["NotificationList"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get organization usage */
  GetOrganizationUsage: {
    parameters: {
      query?: {
        /** @description The starting time of the period to get data from */
        starting_time?: string;
        /** @description The ending time of the period to get data from */
        ending_time?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetOrganizationUsageReply"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get organization usage details */
  GetOrganizationUsageDetails: {
    parameters: {
      query?: {
        /** @description The starting time of the period to get data from */
        starting_time?: string;
        /** @description The ending time of the period to get data from */
        ending_time?: string;
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) Sorts the list in the ascending or the descending order */
        order?: string;
      };
      header?: {
        /** @description If defined with the value 'text/csv', a csv file is returned */
        Accept?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetOrganizationUsageDetailsReply"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List all PersistentVolumes */
  ListPersistentVolumes: {
    parameters: {
      query?: {
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) A filter for the service id */
        service_id?: string;
        /** @description (Optional) A filter for the region */
        region?: string;
        /** @description (Optional) A filter for the name */
        name?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListPersistentVolumesReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Create a PersistentVolume */
  CreatePersistentVolume: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["CreatePersistentVolumeRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["CreatePersistentVolumeReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get a PersistentVolume */
  GetPersistentVolume: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetPersistentVolumeReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Update a PersistentVolume */
  UpdatePersistentVolume: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": {
          /** (Optional) change the name of the volume */
          name?: string;
          /**
           * (Optional) increase the volume size (in Gigabyte / GB)
           * Format: int64
           */
          max_size?: number;
        };
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UpdatePersistentVolumeReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Delete a PersistentVolume */
  DeletePersistentVolume: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["DeletePersistentVolumeReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List App events */
  ListAppEvents: {
    parameters: {
      query?: {
        /** @description (Optional) Filter on app id */
        app_id?: string;
        /** @description (Optional) Filter on app event types */
        types?: string[];
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) Sorts the list in the ascending or the descending order */
        order?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListAppEventsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List App */
  ListApps: {
    parameters: {
      query?: {
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) A filter for name */
        name?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListAppsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Create App */
  CreateApp: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["CreateApp"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["CreateAppReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get App */
  GetApp: {
    parameters: {
      path: {
        /** @description The id of the App */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetAppReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Update App */
  UpdateApp: {
    parameters: {
      query?: {
        update_mask?: string;
      };
      path: {
        /** @description The id of the app to update. */
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["UpdateApp"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UpdateAppReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /**
   * Delete App
   * @description App deletion is allowed for all status.
   */
  DeleteApp: {
    parameters: {
      path: {
        /** @description The id of the App to delete */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["DeleteAppReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Update App */
  UpdateApp2: {
    parameters: {
      query?: {
        update_mask?: string;
      };
      path: {
        /** @description The id of the app to update. */
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["UpdateApp"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UpdateAppReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /**
   * Pause App
   * @description App pause action is allowed for the following status:
   *  - starting
   *  - healthy
   *  - degraded
   *  - unhealthy
   *  - resuming
   */
  PauseApp: {
    parameters: {
      path: {
        /** @description The id of the app to pause. */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["PauseAppReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /**
   * Resume App
   * @description App resume action is allowed for the following status:
   *  - paused
   */
  ResumeApp: {
    parameters: {
      path: {
        /** @description The id of the app to resume. */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ResumeAppReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  ListSecrets: {
    parameters: {
      query?: {
        name?: string;
        limit?: string;
        offset?: string;
        /** @description Filter by secret types */
        types?: ("SIMPLE" | "REGISTRY" | "MANAGED")[];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListSecretsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  CreateSecret: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["CreateSecret"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["CreateSecretReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  GetSecret: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetSecretReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  UpdateSecret: {
    parameters: {
      query?: {
        update_mask?: string;
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Secret"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UpdateSecretReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  DeleteSecret: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["DeleteSecretReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  UpdateSecret2: {
    parameters: {
      query?: {
        update_mask?: string;
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Secret"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UpdateSecretReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  RevealSecret: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": Record<string, never>;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["RevealSecretReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Create a signed URL to upload an archive. */
  CreateArchive: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["CreateArchive"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["CreateArchiveReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Review Organization Capacity */
  ReviewOrganizationCapacity: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["ReviewOrganizationCapacityRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ReviewOrganizationCapacityReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Verify if a docker image is reachable */
  VerifyDockerImage: {
    parameters: {
      query?: {
        /** @description The full image uri to be verified */
        image?: string;
        /** @description (Optional) the id of the secret to use to authenticate to the registry */
        secret_id?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["VerifyDockerImageReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List Deployment events */
  ListDeploymentEvents: {
    parameters: {
      query?: {
        /** @description (Optional) Filter on deployment id */
        deployment_id?: string;
        /** @description (Optional) Filter on deployment event types */
        types?: string[];
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) Sorts the list in the ascending or the descending order */
        order?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListDeploymentEventsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List Deployments */
  ListDeployments: {
    parameters: {
      query?: {
        /** @description (Optional) Filter on application id */
        app_id?: string;
        /** @description (Optional) Filter on service id */
        service_id?: string;
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) Filter on statuses */
        statuses?: ("PENDING" | "PROVISIONING" | "SCHEDULED" | "CANCELING" | "CANCELED" | "ALLOCATING" | "STARTING" | "HEALTHY" | "DEGRADED" | "UNHEALTHY" | "STOPPING" | "STOPPED" | "ERRORING" | "ERROR" | "STASHED")[];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListDeploymentsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get Deployment */
  GetDeployment: {
    parameters: {
      path: {
        /** @description The id of the deployment */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetDeploymentReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /**
   * Cancel Deployment
   * @description Deployment cancellation is allowed for the following status:
   *  - pending
   *  - provisioning
   *  - scheduled
   */
  CancelDeployment: {
    parameters: {
      path: {
        /** @description The id of the deployment to cancel. */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["CancelDeploymentReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List Regional Deployment events */
  ListRegionalDeploymentEvents: {
    parameters: {
      query?: {
        /** @description (Optional) Filter on regional deployment id */
        regional_deployment_id?: string;
        /** @description (Optional) Filter on regional deployment event types */
        types?: string[];
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) Sorts the list in the ascending or the descending order */
        order?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListRegionalDeploymentEventsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /**
   * Experimental: List regional deployments
   * Use at your own risk
   */
  ListRegionalDeployments: {
    parameters: {
      query?: {
        /** @description (Optional) Filter on deployment id */
        deployment_id?: string;
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListRegionalDeploymentsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /**
   * Experimental: Get regional deployment
   * Use at your own risk
   */
  GetRegionalDeployment: {
    parameters: {
      path: {
        /** @description The id of the regional deployment */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetRegionalDeploymentReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List Service events */
  ListServiceEvents: {
    parameters: {
      query?: {
        /** @description (Optional) Filter on service id */
        service_id?: string;
        /** @description (Optional) Filter on service event types */
        types?: string[];
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) Sorts the list in the ascending or the descending order */
        order?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListServiceEventsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List Services */
  ListServices: {
    parameters: {
      query?: {
        /** @description (Optional) The id of the app */
        app_id?: string;
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) A filter for name */
        name?: string;
        /** @description (Optional) Filter on service types */
        types?: ("INVALID_TYPE" | "WEB" | "WORKER" | "DATABASE")[];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListServicesReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Create Service */
  CreateService: {
    parameters: {
      query?: {
        /** @description If set only run validation */
        dry_run?: boolean;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["CreateService"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["CreateServiceReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Generate autocomplete definition for a service */
  Autocomplete: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["AutocompleteRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["AutocompleteReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get Service */
  GetService: {
    parameters: {
      path: {
        /** @description The id of the Service */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetServiceReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Update Service */
  UpdateService: {
    parameters: {
      query?: {
        /** @description If set, run validation and check that the service exists */
        dry_run?: boolean;
      };
      path: {
        /** @description The id of the entity to update */
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["UpdateService"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UpdateServiceReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /**
   * Delete Service
   * @description Service deletion is allowed for all status.
   */
  DeleteService: {
    parameters: {
      path: {
        /** @description The id of the entity to delete */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["DeleteServiceReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Update Service */
  UpdateService2: {
    parameters: {
      query?: {
        /** @description If set, run validation and check that the service exists */
        dry_run?: boolean;
      };
      path: {
        /** @description The id of the entity to update */
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["UpdateService"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UpdateServiceReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /**
   * Pause Service
   * @description Service pause action is allowed for the following status:
   *  - starting
   *  - healthy
   *  - degraded
   *  - unhealthy
   *  - resuming
   */
  PauseService: {
    parameters: {
      path: {
        /** @description The id of the service to pause. */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["PauseServiceReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** ReDeploy Service */
  ReDeploy: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["RedeployRequest.Info"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["RedeployReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /**
   * Resume Service
   * @description Service resume action is allowed for the following status:
   *  - paused
   */
  ResumeService: {
    parameters: {
      path: {
        /** @description The id of the service to pause. */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ResumeServiceReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  ListDomains: {
    parameters: {
      query?: {
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /**
         * @description (Optional) A filter for types
         *
         *  - AUTOASSIGNED: Domain like <appName>-<orgName>.koyeb.app
         */
        types?: ("AUTOASSIGNED" | "CUSTOM")[];
        /** @description (Optional) A filter for statuses */
        statuses?: ("PENDING" | "ACTIVE" | "ERROR" | "DELETING" | "DELETED")[];
        /** @description (Optional) A filter for apps */
        app_ids?: string[];
        /** @description (Optional) A filter for name */
        name?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListDomainsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  CreateDomain: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["CreateDomain"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["CreateDomainReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  GetDomain: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetDomainReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  DeleteDomain: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["DeleteDomainReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  UpdateDomain: {
    parameters: {
      query?: {
        update_mask?: string;
        /** @description If set, run validation and check that the domain is available. */
        dry_run?: boolean;
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["UpdateDomain"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UpdateDomainReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  RefreshDomainStatus: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["RefreshDomainStatusReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List Instance events */
  ListInstanceEvents: {
    parameters: {
      query?: {
        /** @description (Optional) Filter on list of instance id */
        instance_ids?: string[];
        /** @description (Optional) Filter on instance event types */
        types?: string[];
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) Sorts the list in the ascending or the descending order */
        order?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListInstanceEventsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List Instances */
  ListInstances: {
    parameters: {
      query?: {
        /** @description (Optional) Filter on application id */
        app_id?: string;
        /** @description (Optional) Filter on service id */
        service_id?: string;
        /** @description (Optional) Filter on deployment id */
        deployment_id?: string;
        /** @description (Optional) Filter on regional deployment id */
        regional_deployment_id?: string;
        /** @description (Optional) Filter on allocation id */
        allocation_id?: string;
        /** @description (Optional) Filter on replica index */
        replica_index?: string;
        /** @description (Optional) Filter on instance statuses */
        statuses?: ("ALLOCATING" | "STARTING" | "HEALTHY" | "UNHEALTHY" | "STOPPING" | "STOPPED" | "ERROR" | "SLEEPING")[];
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) Sorts the list in the ascending or the descending order */
        order?: string;
        /** @description (Optional) The starting time of the period of running instance */
        starting_time?: string;
        /** @description (Optional) The ending time of the period of running instance */
        ending_time?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListInstancesReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get Instance */
  GetInstance: {
    parameters: {
      path: {
        /** @description The id of the instance */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetInstanceReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  ListBranches: {
    parameters: {
      query?: {
        /** @description (Optional) Filter on one repository. */
        repository_id?: string;
        /**
         * @description (Optional) Filter on branch name using a fuzzy search.
         * Repository filter is required to enable this filter.
         */
        name?: string;
        /** @description (Optional) The number of items to return. */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return. */
        offset?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["kgitproxy.ListBranchesReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  ListRepositories: {
    parameters: {
      query?: {
        /** @description (Optional) Filter on repository name using a fuzzy search. */
        name?: string;
        /** @description (Optional) Define search operation for repository name. Accept either "fuzzy" or "equality", use "fuzzy" by default. */
        name_search_op?: string;
        /** @description (Optional) The number of items to return. */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return. */
        offset?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["kgitproxy.ListRepositoriesReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  ResyncOrganization: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["kgitproxy.ResyncOrganizationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Search */
  Search: {
    parameters: {
      query?: {
        /** @description (Optional) Search query */
        query?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ksearch.SearchReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List Region */
  ListRegions: {
    parameters: {
      query?: {
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) A filter for regions */
        id?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListRegionsReply"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get Region */
  GetRegion: {
    parameters: {
      path: {
        /** @description The name of the region */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetRegionReply"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List datacenters */
  ListDatacenters: {
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListDatacentersReply"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List Instance */
  ListCatalogInstances: {
    parameters: {
      query?: {
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) A filter for instances */
        id?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListCatalogInstancesReply"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get Instance */
  GetCatalogInstance: {
    parameters: {
      path: {
        /** @description The name of the instance */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetCatalogInstanceReply"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List credentials */
  ListCredentials: {
    parameters: {
      query?: {
        /** @description (Optional) A filter for type */
        type?: "INVALID" | "USER" | "ORGANIZATION";
        /** @description (Optional) A filter for name */
        name?: string;
        /** @description (Optional) Filter for an organization */
        organization_id?: string;
        /** @description (Optional) Filter for an user */
        user_id?: string;
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListCredentialsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Create credential */
  CreateCredential: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["CreateCredential"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["CreateCredentialReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get credential */
  GetCredential: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetCredentialReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Update credential */
  UpdateCredential: {
    parameters: {
      query?: {
        update_mask?: string;
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Credential"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UpdateCredentialReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Delete credential */
  DeleteCredential: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["DeleteCredentialReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Update credential */
  UpdateCredential2: {
    parameters: {
      query?: {
        update_mask?: string;
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Credential"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UpdateCredentialReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get intercom profile */
  GetIntercomProfile: {
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetIntercomProfileReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get organization usage summary */
  GetOrganizationSummary: {
    parameters: {
      path: {
        /** @description Organization ID */
        organization_id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetOrganizationSummaryReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get Subscription */
  GetSubscription: {
    parameters: {
      path: {
        /** @description The id of the instance */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetSubscriptionReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  GetAccountActivities: {
    parameters: {
      query?: {
        limit?: string;
        offset?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ActivityList"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  CreateInvite: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["InviteUserRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["Empty"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get OAuth Providers */
  GetOAuthOptions: {
    parameters: {
      query?: {
        /** @description Which authentication flow is being initiated */
        action?: "signin" | "signup" | "register";
        /** @description A small (limited to 400 characters) string of arbitrary metadata which will be encoded in the state */
        metadata?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetOAuthOptionsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Authenticate using OAuth */
  OAuthCallback: {
    parameters: {
      header?: {
        /** @description Seon Fingerprint */
        "seon-fp"?: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["OAuthCallbackRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["OAuthCallbackReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  GetCurrentOrganization: {
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetOrganizationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  ListUserOrganizationInvitations: {
    parameters: {
      query?: {
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) Filter on organization invitation statuses */
        statuses?: ("INVALID" | "PENDING" | "ACCEPTED" | "REFUSED" | "EXPIRED")[];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListUserOrganizationInvitationsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  GetUserOrganizationInvitation: {
    parameters: {
      path: {
        /** @description The id of the organization invitation to get */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetUserOrganizationInvitationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  AcceptOrganizationInvitation: {
    parameters: {
      path: {
        /** @description The id of the organization invitation to accept */
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": Record<string, never>;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["AcceptOrganizationInvitationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  DeclineOrganizationInvitation: {
    parameters: {
      path: {
        /** @description The id of the organization invitation to decline */
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": Record<string, never>;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["DeclineOrganizationInvitationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  GetCurrentUser: {
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UserReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  UpdateUser: {
    parameters: {
      query?: {
        update_mask?: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["UpdateUserRequest.UserUpdateBody"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UserReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  UpdateUser2: {
    parameters: {
      query?: {
        update_mask?: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["UpdateUserRequest.UserUpdateBody"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UserReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  ResendEmailValidation: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["ResendEmailValidationRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ResendEmailValidationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  ResetPassword: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["ResetPasswordRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ResetPasswordReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  Signup: {
    parameters: {
      header?: {
        /** @description Seon Fingerprint */
        "seon-fp"?: string;
      };
    };
    /** @description Create new account */
    requestBody: {
      content: {
        "*/*": components["schemas"]["CreateAccountRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["LoginReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  UpdatePassword: {
    parameters: {
      header?: {
        /** @description Seon Fingerprint */
        "seon-fp"?: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["UpdatePasswordRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["LoginReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  Validate: {
    parameters: {
      header?: {
        /** @description Seon Fingerprint */
        "seon-fp"?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["LoginReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /**
   * Experimental: Has unpaid invoices
   * @description WARNING: Please don't use the following method.
   * Koyeb doesn't guarantee backwards compatible breaking change and reserve the right to completely drop it without notice.
   * USE AT YOUR OWN RISK.
   */
  HasUnpaidInvoices: {
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["HasUnpaidInvoicesReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  Manage: {
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ManageReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /**
   * Experimental: Fetch next invoice
   * @description WARNING: Please don't use the following method.
   * Koyeb doesn't guarantee backwards compatible breaking change and reserve the right to completely drop it without notice.
   * USE AT YOUR OWN RISK.
   */
  NextInvoice: {
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["NextInvoiceReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Fetch github installation configuration */
  GetGithubInstallation: {
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetGithubInstallationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Start github installation */
  GithubInstallation: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["GithubInstallationRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GithubInstallationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Github callback for app installation */
  GithubInstallationCallback: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["GithubInstallationCallbackRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GithubInstallationCallbackReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Create organization */
  CreateOrganization: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["CreateOrganizationRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["CreateOrganizationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get organization */
  GetOrganization: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetOrganizationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Update organization */
  UpdateOrganization: {
    parameters: {
      query?: {
        update_mask?: string;
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Organization"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UpdateOrganizationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Delete an organization */
  DeleteOrganization: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["DeleteOrganizationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Update organization */
  UpdateOrganization2: {
    parameters: {
      query?: {
        update_mask?: string;
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["Organization"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UpdateOrganizationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Deactivate an organization */
  DeactivateOrganization: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": Record<string, never>;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["DeactivateOrganizationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Update organization plan */
  UpdateOrganizationPlan: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": {
          plan?: components["schemas"]["Plan"];
        };
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UpdateOrganizationPlanReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Reactivate an organization */
  ReactivateOrganization: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": Record<string, never>;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ReactivateOrganizationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Upsert organization's signup qualification */
  UpsertSignupQualification: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": {
          signup_qualification?: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["UpsertSignupQualificationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Switch organization context */
  SwitchOrganization: {
    parameters: {
      header?: {
        /** @description Seon Fingerprint */
        "seon-fp"?: string;
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": Record<string, never>;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["LoginReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  CannyAuth: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["CannyAuthRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["CannyAuthReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  DiscourseAuth: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["DiscourseAuthRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["DiscourseAuthReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List payment methods */
  ListPaymentMethods: {
    parameters: {
      query?: {
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) Filter on payment method statuses */
        statuses?: ("INVALID" | "CREATED" | "AUTHORIZED" | "DECLINED" | "CANCELED" | "EXPIRED" | "UNCHECKED")[];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListPaymentMethodsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Create payment authorization */
  CreatePaymentAuthorization: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["CreatePaymentAuthorizationRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["CreatePaymentAuthorizationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Get payment method */
  GetPaymentMethod: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetPaymentMethodReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Delete payment method */
  DeletePaymentMethod: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["DeletePaymentMethodReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Confirm payment authorization */
  ConfirmPaymentAuthorization: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": Record<string, never>;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ConfirmPaymentAuthorizationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Delete user */
  DeleteUser: {
    parameters: {
      path: {
        /** @description The id of the user */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["DeleteUserReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  GetQuotas: {
    parameters: {
      path: {
        organization_id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetQuotasReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** List organization members */
  ListOrganizationMembers: {
    parameters: {
      query?: {
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) Filter for an organization */
        organization_id?: string;
        /** @description (Optional) Filter for an user */
        user_id?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListOrganizationMembersReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Remove an organization member */
  RemoveOrganizationMember: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["RemoveOrganizationMemberReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Login user */
  Login: {
    parameters: {
      header?: {
        /** @description Seon Fingerprint */
        "seon-fp"?: string;
      };
    };
    requestBody: {
      content: {
        "*/*": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["LoginReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Logout user */
  Logout: {
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["LogoutReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Refresh token */
  RefreshToken: {
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["LoginReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /**
   * New session
   * @description Creates a new session without an organization for current user.
   * NOTE: If you want a session linked to another organization, please use "Switch organization".
   */
  NewSession: {
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["LoginReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  /** Confirm organization action */
  ConfirmOrganizationAction: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ConfirmOrganizationActionReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  ListOrganizationInvitations: {
    parameters: {
      query?: {
        /** @description (Optional) The number of items to return */
        limit?: string;
        /** @description (Optional) The offset in the list of item to return */
        offset?: string;
        /** @description (Optional) Filter on organization invitation statuses */
        statuses?: ("INVALID" | "PENDING" | "ACCEPTED" | "REFUSED" | "EXPIRED")[];
        /**
         * @description (Optional) Filter on invitee ID. Will match both invitations sent to
         * that user_id and invitations sent to the email of that user_id.
         * The only valid value is the requester's user_id
         */
        user_id?: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ListOrganizationInvitationsReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  CreateOrganizationInvitation: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["CreateOrganizationInvitationRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["CreateOrganizationInvitationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  GetOrganizationInvitation: {
    parameters: {
      path: {
        /** @description The id of the invitation to get */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["GetOrganizationInvitationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  DeleteOrganizationInvitation: {
    parameters: {
      path: {
        /** @description The id of the organization invitation to delete */
        id: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["DeleteOrganizationInvitationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
  ResendOrganizationInvitation: {
    parameters: {
      path: {
        /** @description The id of the organization invitation to resend */
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": Record<string, never>;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "*/*": components["schemas"]["ResendOrganizationInvitationReply"];
        };
      };
      /** @description Validation error */
      400: {
        content: {
          "*/*": components["schemas"]["ErrorWithFields"];
        };
      };
      /** @description Returned when the token is not valid. */
      401: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the user does not have permission to access the resource. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned when the resource does not exist. */
      404: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Returned in case of server error. */
      500: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description Service is unavailable. */
      503: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        content: {
          "*/*": components["schemas"]["google.rpc.Status"];
        };
      };
    };
  };
}
